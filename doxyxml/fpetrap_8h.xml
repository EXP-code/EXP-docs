<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="fpetrap_8h" kind="file" language="C++">
    <compoundname>fpetrap.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cfenv</includes>
    <includes local="no">list</includes>
    <includes local="no">signal.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/fpetrap.h</label>
        <link refid="fpetrap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cfenv</label>
      </node>
      <node id="3">
        <label>iomanip</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>list</label>
      </node>
      <node id="6">
        <label>signal.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="fpetrap_8h_1a361ed6a787b7e40102cf6cb632bfaf3f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int my_err</definition>
        <argsstring></argsstring>
        <name>my_err</name>
        <briefdescription>
<para>Global to hold error code. </para>
        </briefdescription>
        <detaileddescription>
<para>Some FPE trapping stuff for debugging </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/fpetrap.h" line="19" column="12" bodyfile="/home/weinberg/Projects/EXP/include/fpetrap.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="fpetrap_8h_1a2226e0dd8dd57eefc21a83b6462022a7" compoundref="fpetrap_8h" startline="22" endline="26">my_fpu_handler</referencedby>
      </memberdef>
      <memberdef kind="variable" id="fpetrap_8h_1a942b8fb4c34353a6183d3bd574ba768f" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* oldhandler) (int)</definition>
        <argsstring>)(int)</argsstring>
        <name>oldhandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/fpetrap.h" line="28" column="8" bodyfile="/home/weinberg/Projects/EXP/include/fpetrap.h" bodystart="28" bodyend="-1"/>
        <referencedby refid="fpetrap_8h_1a76440b3b5a08d9d65df560ed501d1f4d" compoundref="fpetrap_8h" startline="35" endline="73">set_fpu_handler</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="fpetrap_8h_1a2226e0dd8dd57eefc21a83b6462022a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void my_fpu_handler</definition>
        <argsstring>(int err)</argsstring>
        <name>my_fpu_handler</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Very lean error handler. Only good for setting a debugger breakpoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/fpetrap.h" line="22" column="13" bodyfile="/home/weinberg/Projects/EXP/include/fpetrap.h" bodystart="22" bodyend="26"/>
        <references refid="fpetrap_8h_1a361ed6a787b7e40102cf6cb632bfaf3f" compoundref="fpetrap_8h" startline="19">my_err</references>
        <referencedby refid="fpetrap_8h_1a76440b3b5a08d9d65df560ed501d1f4d" compoundref="fpetrap_8h" startline="35" endline="73">set_fpu_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="fpetrap_8h_1a76440b3b5a08d9d65df560ed501d1f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_fpu_handler</definition>
        <argsstring>(void)</argsstring>
        <name>set_fpu_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Turns on exceptions for invalid, div by zero and overflow, other <linebreak/>
 bits default. This will only work for x86 architecture. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/fpetrap.h" line="35" column="6" bodyfile="/home/weinberg/Projects/EXP/include/fpetrap.h" bodystart="35" bodyend="73"/>
        <references refid="fpetrap_8h_1a2226e0dd8dd57eefc21a83b6462022a7" compoundref="fpetrap_8h" startline="22" endline="26">my_fpu_handler</references>
        <references refid="localmpi_8_h_1a20705b4372a9940d34a164bae541be1f" compoundref="localmpi_8_h" startline="17">myid</references>
        <references refid="fpetrap_8h_1a942b8fb4c34353a6183d3bd574ba768f" compoundref="fpetrap_8h" startline="28">oldhandler</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FPE_TRAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FPE_TRAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfenv&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_FPU_CONTROL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fpu_control.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="fpetrap_8h_1a361ed6a787b7e40102cf6cb632bfaf3f" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fpetrap_8h_1a361ed6a787b7e40102cf6cb632bfaf3f" kindref="member">my_err</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="fpetrap_8h_1a2226e0dd8dd57eefc21a83b6462022a7" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fpetrap_8h_1a2226e0dd8dd57eefc21a83b6462022a7" kindref="member">my_fpu_handler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="fpetrap_8h_1a361ed6a787b7e40102cf6cb632bfaf3f" kindref="member">my_err</ref><sp/>=<sp/>err;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FP<sp/>trapped<sp/>error=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="fpetrap_8h_1a361ed6a787b7e40102cf6cb632bfaf3f" kindref="member">my_err</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="fpetrap_8h_1a942b8fb4c34353a6183d3bd574ba768f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="fpetrap_8h_1a942b8fb4c34353a6183d3bd574ba768f" kindref="member">oldhandler</ref>)(int);<sp/></highlight><highlight class="comment">//<sp/>keep<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>initial<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>can<sp/>be<sp/>restored<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="fpetrap_8h_1a76440b3b5a08d9d65df560ed501d1f4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fpetrap_8h_1a76440b3b5a08d9d65df560ed501d1f4d" kindref="member">set_fpu_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_FPU_CONTROL_H<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>control<sp/>flag<sp/>(see<sp/>fpu_control.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cw<sp/>=<sp/>0x0372;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>_FPU_SETCW(cw);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="fpetrap_8h_1a942b8fb4c34353a6183d3bd574ba768f" kindref="member">oldhandler</ref><sp/>=<sp/>signal(SIGFPE,<sp/><ref refid="fpetrap_8h_1a2226e0dd8dd57eefc21a83b6462022a7" kindref="member">my_fpu_handler</ref>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SIG_ERR<sp/>==<sp/><ref refid="fpetrap_8h_1a942b8fb4c34353a6183d3bd574ba768f" kindref="member">oldhandler</ref>)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXP:<sp/>Cannot<sp/>install<sp/>floating-point<sp/>exception<sp/>handler&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EXP:<sp/>Floating<sp/>point-exception<sp/>handler<sp/>installed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_FPU_CONTROL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>feenableexcept(FE_ALL_EXCEPT<sp/>&amp;<sp/>~FE_INEXACT);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>enabled<sp/>flags<sp/>to<sp/>root<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="localmpi_8_h_1a20705b4372a9940d34a164bae541be1f" kindref="member">myid</ref>==0)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;std::pair&lt;int,<sp/>std::string&gt;&gt;<sp/>flags<sp/>=</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{FE_DIVBYZERO,<sp/></highlight><highlight class="stringliteral">&quot;divide-by-zero&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{FE_INEXACT,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inexact&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{FE_INVALID,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{FE_OVERFLOW,<sp/><sp/></highlight><highlight class="stringliteral">&quot;overflow&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{FE_UNDERFLOW,<sp/></highlight><highlight class="stringliteral">&quot;underflow&quot;</highlight><highlight class="normal">}<sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_flags<sp/>=<sp/>fegetexcept();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----<sp/>Enabled<sp/>FE<sp/>flags:<sp/>&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.first<sp/>&amp;<sp/>_flags)<sp/>std::cout<sp/>&lt;&lt;<sp/>v.second<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\b&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/weinberg/Projects/EXP/include/fpetrap.h"/>
  </compounddef>
</doxygen>
