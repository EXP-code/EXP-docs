<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_cylinder" kind="class" language="C++" prot="public">
    <compoundname>Cylinder</compoundname>
    <basecompoundref refid="class_basis" prot="public" virt="non-virtual">Basis</basecompoundref>
    <basecompoundref refid="class_basis" prot="public" virt="non-virtual">Basis</basecompoundref>
    <includes refid="_cylinder_8_h" local="no">Cylinder.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_cylinder_1a1d58bf255110415e1931d8db2ad0ea76" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::acut</definition>
        <argsstring></argsstring>
        <name>acut</name>
        <qualifiedname>Cylinder::acut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="130" column="36" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ace6e78eca47b4eeb70c39cbb5faa7382" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::acyl</definition>
        <argsstring></argsstring>
        <name>acyl</name>
        <qualifiedname>Cylinder::acyl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="130" column="31" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a9c5152a2d3c9f1303edbd4583e852bf7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::ashift</definition>
        <argsstring></argsstring>
        <name>ashift</name>
        <qualifiedname>Cylinder::ashift</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="115" column="10" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1aea8a8e1986913f71961bf3164e5f59ba" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Cylinder::cachename</definition>
        <argsstring></argsstring>
        <name>cachename</name>
        <qualifiedname>Cylinder::cachename</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="135" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ae87c4698e638dc93937b5a8d327088d2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::cmapR</definition>
        <argsstring></argsstring>
        <name>cmapR</name>
        <qualifiedname>Cylinder::cmapR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="47" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ac31d5bc4433a9f3a3f44a8dd1a242d28" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::cmapZ</definition>
        <argsstring></argsstring>
        <name>cmapZ</name>
        <qualifiedname>Cylinder::cmapZ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="53" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a408307e5a429e0ba50cbd0b1aa55bd7f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::compute</definition>
        <argsstring></argsstring>
        <name>compute</name>
        <qualifiedname>Cylinder::compute</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="137" column="38" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a8c4a5ae2696883060a6f5880c207c6d3" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::cylmass</definition>
        <argsstring></argsstring>
        <name>cylmass</name>
        <qualifiedname>Cylinder::cylmass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="120" column="10" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1acee994bfceda72c9a713300bbe384a1e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Cylinder::cylmass0</definition>
        <argsstring></argsstring>
        <name>cylmass0</name>
        <qualifiedname>Cylinder::cylmass0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="124" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1aaf9d897ba34c9679899680e239793d57" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::density</definition>
        <argsstring></argsstring>
        <name>density</name>
        <qualifiedname>Cylinder::density</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="136" column="36" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a2cc4974e868067cd4ec3124c5b335361" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::dump_basis</definition>
        <argsstring></argsstring>
        <name>dump_basis</name>
        <qualifiedname>Cylinder::dump_basis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="137" column="27" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a29234e95561929d2ed1c79626f2dccb2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::eof</definition>
        <argsstring></argsstring>
        <name>eof</name>
        <qualifiedname>Cylinder::eof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="119" column="7" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a548c38dfaeb2146c30823d9d8011450e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::eof_over</definition>
        <argsstring></argsstring>
        <name>eof_over</name>
        <qualifiedname>Cylinder::eof_over</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="136" column="81" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1aeac28737a74f9054cf9e03b83be54518" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::EVEN_M</definition>
        <argsstring></argsstring>
        <name>EVEN_M</name>
        <qualifiedname>Cylinder::EVEN_M</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="113" column="16" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a8e8b71b9cd08c7696dc4b89a2b6f59fa" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::expcond</definition>
        <argsstring></argsstring>
        <name>expcond</name>
        <qualifiedname>Cylinder::expcond</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="113" column="8" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a7a8b54489da5644c1270b6d37ba21c0d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::firstime</definition>
        <argsstring></argsstring>
        <name>firstime</name>
        <qualifiedname>Cylinder::firstime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="137" column="18" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a17fbe3eb1e8a1070e5f957883591847f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::firstime_coef</definition>
        <argsstring></argsstring>
        <name>firstime_coef</name>
        <qualifiedname>Cylinder::firstime_coef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="137" column="46" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a66573150c4ffbdc36a62313b9ae25b04" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Eigen::Vector3d &gt;</type>
        <definition>std::vector&lt; Eigen::Vector3d &gt; Cylinder::frc</definition>
        <argsstring></argsstring>
        <name>frc</name>
        <qualifiedname>Cylinder::frc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="122" column="19" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a291d829623c5dd26906130bb00b976d2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::hcyl</definition>
        <argsstring></argsstring>
        <name>hcyl</name>
        <qualifiedname>Cylinder::hcyl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="133" column="10" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a1e1f0fd4455be7bff5fc612603f8bab8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::hexp</definition>
        <argsstring></argsstring>
        <name>hexp</name>
        <qualifiedname>Cylinder::hexp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="133" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ad85ba8c6f56f1a53daded0bf0f18b64c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::lmax</definition>
        <argsstring></argsstring>
        <name>lmax</name>
        <qualifiedname>Cylinder::lmax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="131" column="12" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a1c3215879f78fcbe40673143c8e5f42c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::lmaxfid</definition>
        <argsstring></argsstring>
        <name>lmaxfid</name>
        <qualifiedname>Cylinder::lmaxfid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="131" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a34b887a9b700e9bb529dc2990c97e6d0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::logarithmic</definition>
        <argsstring></argsstring>
        <name>logarithmic</name>
        <qualifiedname>Cylinder::logarithmic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="24" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1aa04955a71bc38bd5073ac88c728ed33b" prot="private" static="no" mutable="no">
        <type><ref refid="class_mixture_basis" kindref="compound">MixtureBasis</ref> *</type>
        <definition>MixtureBasis * Cylinder::mix</definition>
        <argsstring></argsstring>
        <name>mix</name>
        <qualifiedname>Cylinder::mix</qualifiedname>
        <briefdescription>
<para>For massive satellite simulations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="165" column="16" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a9234ee393feef01aad1ca212f09cd79d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::mlim</definition>
        <argsstring></argsstring>
        <name>mlim</name>
        <qualifiedname>Cylinder::mlim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="131" column="28" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="131" bodyend="-1"/>
        <referencedby refid="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" compoundref="_cylinder_8_h" startline="378" endline="402">determine_fields_at_point_cyl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a12ec434b1c079bf422d74f09034177a2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::mmax</definition>
        <argsstring></argsstring>
        <name>mmax</name>
        <qualifiedname>Cylinder::mmax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="131" column="23" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="131" bodyend="-1"/>
        <referencedby refid="class_cylinder_1a07457e19eb28e7c4b204e26d31c1b267" compoundref="_cylinder_8_h" startline="280" endline="288">getCoefs</referencedby>
        <referencedby refid="class_cylinder_1a717a3d56d06af595e0ed1fe364b2525b" compoundref="_cylinder_8_h" startline="291" endline="298">setCoefs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a88fe8538c7db750b7ade565a5833a551" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::Mouter</definition>
        <argsstring></argsstring>
        <name>Mouter</name>
        <qualifiedname>Cylinder::Mouter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="130" column="48" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ab3be12b4f68220b0d219855681eb148b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncompcyl</definition>
        <argsstring></argsstring>
        <name>ncompcyl</name>
        <qualifiedname>Cylinder::ncompcyl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="119" column="11" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ab2db311e1dc6590d107c11eb90184b27" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncylnx</definition>
        <argsstring></argsstring>
        <name>ncylnx</name>
        <qualifiedname>Cylinder::ncylnx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="132" column="7" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a386f1055748f3c14aa1e75d4b43ac65a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncylny</definition>
        <argsstring></argsstring>
        <name>ncylny</name>
        <qualifiedname>Cylinder::ncylny</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="132" column="14" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a0645bcb6ca151f75a7328c48b7c7f561" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncylodd</definition>
        <argsstring></argsstring>
        <name>ncylodd</name>
        <qualifiedname>Cylinder::ncylodd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="12" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a17abe7455e146a16caf01004ce99b47b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncylorder</definition>
        <argsstring></argsstring>
        <name>ncylorder</name>
        <qualifiedname>Cylinder::ncylorder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="134" column="7" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a7b5419be05569c7a29bcf759e254b015" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncylr</definition>
        <argsstring></argsstring>
        <name>ncylr</name>
        <qualifiedname>Cylinder::ncylr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="132" column="21" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a894fedb582c1ea3afb9ab5342d398e8a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::ncylrecomp</definition>
        <argsstring></argsstring>
        <name>ncylrecomp</name>
        <qualifiedname>Cylinder::ncylrecomp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="20" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ae4cdc7ef48e7c3db7e2dd6193da043e9" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::Ninner</definition>
        <argsstring></argsstring>
        <name>Ninner</name>
        <qualifiedname>Cylinder::Ninner</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="130" column="41" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a4c520789d2760f4aa84faeb9f1982a90" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::nmax</definition>
        <argsstring></argsstring>
        <name>nmax</name>
        <qualifiedname>Cylinder::nmax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="7" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a19766a8761b8e889cb47767d13d8310f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::nmaxfid</definition>
        <argsstring></argsstring>
        <name>nmaxfid</name>
        <qualifiedname>Cylinder::nmaxfid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="131" column="7" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a030852fd857b6c058aa2e7af07b8419b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::npca</definition>
        <argsstring></argsstring>
        <name>npca</name>
        <qualifiedname>Cylinder::npca</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="31" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a6216961404726e8db70d0c8cfc21a7b7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::npca0</definition>
        <argsstring></argsstring>
        <name>npca0</name>
        <qualifiedname>Cylinder::npca0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="36" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a4ef6a4e32e1d56fba2c0c05090996ae0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::nvtk</definition>
        <argsstring></argsstring>
        <name>nvtk</name>
        <qualifiedname>Cylinder::nvtk</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="134" column="42" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ac8c9b5b3e62d685ed588d4cb1749796d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; Cylinder::offgrid</definition>
        <argsstring></argsstring>
        <name>offgrid</name>
        <qualifiedname>Cylinder::offgrid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="125" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_cyl_e_x_p" kindref="compound">CylEXP</ref> &gt;</type>
        <definition>std::shared_ptr&lt; CylEXP &gt; Cylinder::ortho</definition>
        <argsstring></argsstring>
        <name>ortho</name>
        <qualifiedname>Cylinder::ortho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="118" column="19" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="118" bodyend="-1"/>
        <referencedby refid="class_cylinder_1a8fe6465fcda2c9d81b9986fb30db316a" compoundref="_cyl_two_d_8_h" startline="159" endline="167">compute_multistep_coefficients</referencedby>
        <referencedby refid="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" compoundref="_cylinder_8_h" startline="378" endline="402">determine_fields_at_point_cyl</referencedby>
        <referencedby refid="class_cylinder_1a07457e19eb28e7c4b204e26d31c1b267" compoundref="_cylinder_8_h" startline="280" endline="288">getCoefs</referencedby>
        <referencedby refid="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" compoundref="_cylinder_8_h" startline="417" endline="430">multistep_update_begin</referencedby>
        <referencedby refid="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" compoundref="_cylinder_8_h" startline="432" endline="438">multistep_update_finish</referencedby>
        <referencedby refid="class_cylinder_1a717a3d56d06af595e0ed1fe364b2525b" compoundref="_cylinder_8_h" startline="291" endline="298">setCoefs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a18dfd51d53a7b42743201ebea8791dd7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::pcadiag</definition>
        <argsstring></argsstring>
        <name>pcadiag</name>
        <qualifiedname>Cylinder::pcadiag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="58" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a5223e5b265f66daf43f40e9e9e7800c1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::pcaeof</definition>
        <argsstring></argsstring>
        <name>pcaeof</name>
        <qualifiedname>Cylinder::pcaeof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="66" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a7cde3e9c2a02333f1da31e2ea5a23815" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::pcainit</definition>
        <argsstring></argsstring>
        <name>pcainit</name>
        <qualifiedname>Cylinder::pcainit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="43" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a998a906122544ef609d64315e29ac010" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::pcavar</definition>
        <argsstring></argsstring>
        <name>pcavar</name>
        <qualifiedname>Cylinder::pcavar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="36" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1afdc928a1a1e6aa7ed2f05543379d89d2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::pcavtk</definition>
        <argsstring></argsstring>
        <name>pcavtk</name>
        <qualifiedname>Cylinder::pcavtk</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="51" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1acd2caa76f815c6f2060678642e75efd0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::pnum</definition>
        <argsstring></argsstring>
        <name>pnum</name>
        <qualifiedname>Cylinder::pnum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="114" column="12" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a4fec25d8a1b146fcaa5fb44600615be7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Eigen::Vector3d &gt;</type>
        <definition>std::vector&lt; Eigen::Vector3d &gt; Cylinder::pos</definition>
        <argsstring></argsstring>
        <name>pos</name>
        <qualifiedname>Cylinder::pos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="122" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ae030480be4abf0ed4c4c9537916699f5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::precond</definition>
        <argsstring></argsstring>
        <name>precond</name>
        <qualifiedname>Cylinder::precond</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="113" column="8" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ac4b0aa8cca2b099927173f54f5d15374" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Cylinder::pyname</definition>
        <argsstring></argsstring>
        <name>pyname</name>
        <qualifiedname>Cylinder::pyname</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="135" column="25" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a0378e0869280d9ce4f60bddd6efa64c3" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::rcylmax</definition>
        <argsstring></argsstring>
        <name>rcylmax</name>
        <qualifiedname>Cylinder::rcylmax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="130" column="18" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a5ea6efe65d6a8d3fcceb393bb2c10d1b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::rcylmin</definition>
        <argsstring></argsstring>
        <name>rcylmin</name>
        <qualifiedname>Cylinder::rcylmin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="130" column="10" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a23395a8853a0f28ca825e21216970c3a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::rem</definition>
        <argsstring></argsstring>
        <name>rem</name>
        <qualifiedname>Cylinder::rem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="133" column="24" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a5adfedecd063b3d959213e3ebbdcfd7f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::resetT</definition>
        <argsstring></argsstring>
        <name>resetT</name>
        <qualifiedname>Cylinder::resetT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="120" column="18" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ae86c72dc343ff4e236cccf2e57d9f28b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::rnum</definition>
        <argsstring></argsstring>
        <name>rnum</name>
        <qualifiedname>Cylinder::rnum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="114" column="7" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a565762a9935614e789d776b6dad1560c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::self_consistent</definition>
        <argsstring></argsstring>
        <name>self_consistent</name>
        <qualifiedname>Cylinder::self_consistent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="136" column="8" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="136" bodyend="-1"/>
        <referencedby refid="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" compoundref="_cylinder_8_h" startline="417" endline="430">multistep_update_begin</referencedby>
        <referencedby refid="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" compoundref="_cylinder_8_h" startline="432" endline="438">multistep_update_finish</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ab0de68f61c5bdf589cfe8b865e67a495" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::snr</definition>
        <argsstring></argsstring>
        <name>snr</name>
        <qualifiedname>Cylinder::snr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="133" column="20" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a78b65f10dcc38c83c11ebab173f614c6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::subsamp</definition>
        <argsstring></argsstring>
        <name>subsamp</name>
        <qualifiedname>Cylinder::subsamp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="113" column="23" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a63db8edc6a36ea94b4fb59337cad9628" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::tnum</definition>
        <argsstring></argsstring>
        <name>tnum</name>
        <qualifiedname>Cylinder::tnum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="114" column="17" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1abba13fc273f5810d1235db57cde60a67" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::try_cache</definition>
        <argsstring></argsstring>
        <name>try_cache</name>
        <qualifiedname>Cylinder::try_cache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="137" column="8" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a262f89ac08cdc97a4ffc86cf4ae12f6b" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Cylinder::vflag</definition>
        <argsstring></argsstring>
        <name>vflag</name>
        <qualifiedname>Cylinder::vflag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="116" column="16" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a2ac137b2f949e4d41ea3d5b61ed7581e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::zmax</definition>
        <argsstring></argsstring>
        <name>zmax</name>
        <qualifiedname>Cylinder::zmax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="130" column="26" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="130" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_cylinder_1a82abc17e0b1611dd2879b108a1f12b6d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Cylinder::coefMaster</definition>
        <argsstring></argsstring>
        <name>coefMaster</name>
        <qualifiedname>Cylinder::coefMaster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Master node ships coefficients to hosts. True (default) implies that only the master node caches the coefficients for playback to save core memory. This is set in the config input using the &apos;coefMaster: bool&apos; parameter. Once I am sure that there are no algorithmic issues, I will remove this as an option. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="271" column="8" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a536f1961a271262c6c73a2cd8b074eab" prot="protected" static="no" mutable="no">
        <type>CoefClasses::CylCoefs</type>
        <definition>CoefClasses::CylCoefs Cylinder::cylCoefs</definition>
        <argsstring></argsstring>
        <name>cylCoefs</name>
        <qualifiedname>Cylinder::cylCoefs</qualifiedname>
        <briefdescription>
<para>Coefficient container instance for writing HDF5. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="301" column="25" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a9c9f2064fd2e562d144da4dfab80a274" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::defSampT</definition>
        <argsstring></argsstring>
        <name>defSampT</name>
        <qualifiedname>Cylinder::defSampT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="173" column="13" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a6be0605baa5de43ff2578d2870818ac7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Cylinder::lastPlayTime</definition>
        <argsstring></argsstring>
        <name>lastPlayTime</name>
        <qualifiedname>Cylinder::lastPlayTime</qualifiedname>
        <briefdescription>
<para>Last playback coefficient evaluation time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="274" column="10" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a9e99f36b08c657530c89e07423ad0cbe" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; unsigned &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;unsigned&gt; &gt; Cylinder::occt</definition>
        <argsstring></argsstring>
        <name>occt</name>
        <qualifiedname>Cylinder::occt</qualifiedname>
        <briefdescription>
<para>CUDA method for coefficient accumulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Test change level counts for deep debugging enabled by setting CYL_UPDATE_TABLE at the top of this header file or the command line </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="255" column="15" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="255" bodyend="-1"/>
        <referencedby refid="class_cylinder_1a57315dc95a1b474e33109007f654c20e" compoundref="_cylinder_8_h" startline="443" endline="452">multistep_add_debug</referencedby>
        <referencedby refid="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" compoundref="_cylinder_8_h" startline="417" endline="430">multistep_update_begin</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a101160d0f44fbe28d1aa349338a6915f" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXcd</type>
        <definition>Eigen::MatrixXcd Cylinder::P</definition>
        <argsstring></argsstring>
        <name>P</name>
        <qualifiedname>Cylinder::P</qualifiedname>
        <briefdescription>
<para>Save data pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="277" column="20" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ab42b1b72eff2c9aca1fc2b4ba97ca968" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXcd</type>
        <definition>Eigen::MatrixXcd Cylinder::P1</definition>
        <argsstring></argsstring>
        <name>P1</name>
        <qualifiedname>Cylinder::P1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="277" column="22" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a8221adf2f7752878029457315306b6d3" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; CoefClasses::CylCoefs &gt;</type>
        <definition>std::shared_ptr&lt; CoefClasses::CylCoefs &gt; Cylinder::playback</definition>
        <argsstring></argsstring>
        <name>playback</name>
        <qualifiedname>Cylinder::playback</qualifiedname>
        <briefdescription>
<para>CUDA method for coefficient accumulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Coefficient playback instance. Using shared_ptr to avoid constructing a simple pointer or null instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="263" column="19" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1abee587361c163c331bd1ddce15772554" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Cylinder::sampT</definition>
        <argsstring></argsstring>
        <name>sampT</name>
        <qualifiedname>Cylinder::sampT</qualifiedname>
        <briefdescription>
<para>For variance subsampling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="173" column="7" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="173" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_cylinder_1a9a3ad9c738c98c33c997fd74ca3872ee" prot="protected" static="yes" mutable="no">
        <type>const std::set&lt; std::string &gt;</type>
        <definition>static const std::set&lt; std::string &gt; Cylinder::valid_keys</definition>
        <argsstring></argsstring>
        <name>valid_keys</name>
        <qualifiedname>Cylinder::valid_keys</qualifiedname>
        <briefdescription>
<para>Valid keys for YAML configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="304" column="25" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="304" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_cylinder_1a939689b3e2921594c2088dd443dbdcd1" prot="public" static="yes" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>static pthread_mutex_t Cylinder::cos_coef_lock</definition>
        <argsstring></argsstring>
        <name>cos_coef_lock</name>
        <qualifiedname>Cylinder::cos_coef_lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="310" column="36" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1ac4604b06d6359a220b903dd5b5ef05b3" prot="public" static="yes" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>static pthread_mutex_t Cylinder::sin_coef_lock</definition>
        <argsstring></argsstring>
        <name>sin_coef_lock</name>
        <qualifiedname>Cylinder::sin_coef_lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="310" column="50" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cylinder_1a9997b96fd22bf7f5d9990cb5dbfdcfb9" prot="public" static="yes" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>static pthread_mutex_t Cylinder::used_lock</definition>
        <argsstring></argsstring>
        <name>used_lock</name>
        <qualifiedname>Cylinder::used_lock</qualifiedname>
        <briefdescription>
<para>Mutexes for multithreading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="310" column="26" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="310" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_cylinder_1a301c653a9d52036222cc9e80d75ef5df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::compute_grid_mass</definition>
        <argsstring>()</argsstring>
        <name>compute_grid_mass</name>
        <qualifiedname>Cylinder::compute_grid_mass</qualifiedname>
        <briefdescription>
<para>Manual computation of on-grid mass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="168" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a301c653a9d52036222cc9e80d75ef5df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::compute_grid_mass</definition>
        <argsstring>()</argsstring>
        <name>compute_grid_mass</name>
        <qualifiedname>Cylinder::compute_grid_mass</qualifiedname>
        <briefdescription>
<para>Manual computation of on-grid mass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="176" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a8fe6465fcda2c9d81b9986fb30db316a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::compute_multistep_coefficients</definition>
        <argsstring>()</argsstring>
        <name>compute_multistep_coefficients</name>
        <qualifiedname>Cylinder::compute_multistep_coefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extrapolate and sum coefficents per multistep level to get a complete set of coefficients for force evaluation at an intermediate time step </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="159" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a8fe6465fcda2c9d81b9986fb30db316a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::compute_multistep_coefficients</definition>
        <argsstring>()</argsstring>
        <name>compute_multistep_coefficients</name>
        <qualifiedname>Cylinder::compute_multistep_coefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extrapolate and sum coefficents per multistep level to get a complete set of coefficients for force evaluation at an intermediate time step </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="159" column="8" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="159" bodyend="167"/>
        <references refid="global_8_h_1ae5fcffdfa527121d2b3f80644536edbd">cuda_prof</references>
        <references refid="global_8_h_1ae68076dadfc8e0ee051559218f8a16aa">mfirst</references>
        <references refid="global_8_h_1a88502f2706794e5f58c96bfa9a6287d0">mstep</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
        <references refid="class_pot_accel_1a74b41dd5c2f102dd3184ac53b6172462" compoundref="_pot_accel_8_h" startline="74">PotAccel::play_back</references>
        <references refid="class_pot_accel_1aea1c756cd9616a1daf73541780b45798" compoundref="_pot_accel_8_h" startline="77">PotAccel::play_cnew</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a2052d5c8fe1589f91215058ebd72ec2a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_acceleration_and_potential</definition>
        <argsstring>()</argsstring>
        <name>determine_acceleration_and_potential</name>
        <qualifiedname>Cylinder::determine_acceleration_and_potential</qualifiedname>
        <reimplements refid="class_basis_1abb4dbfbe9c234f44b1719a4d89dc3951">determine_acceleration_and_potential</reimplements>
        <briefdescription>
<para>All derived classes must provide a method to compute the force. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="149" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a2052d5c8fe1589f91215058ebd72ec2a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_acceleration_and_potential</definition>
        <argsstring>()</argsstring>
        <name>determine_acceleration_and_potential</name>
        <qualifiedname>Cylinder::determine_acceleration_and_potential</qualifiedname>
        <reimplements refid="class_basis_1abb4dbfbe9c234f44b1719a4d89dc3951">determine_acceleration_and_potential</reimplements>
        <briefdescription>
<para>All derived classes must provide a method to compute the force. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="149" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a7833c07ea8eeb02353c696114de18fbc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * Cylinder::determine_acceleration_and_potential_thread</definition>
        <argsstring>(void *arg)</argsstring>
        <name>determine_acceleration_and_potential_thread</name>
        <qualifiedname>Cylinder::determine_acceleration_and_potential_thread</qualifiedname>
        <reimplements refid="class_pot_accel_1a45b09387fd7083e15a11522454f4c4b3">determine_acceleration_and_potential_thread</reimplements>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Multithreading implementation of the force computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="153" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a7833c07ea8eeb02353c696114de18fbc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * Cylinder::determine_acceleration_and_potential_thread</definition>
        <argsstring>(void *arg)</argsstring>
        <name>determine_acceleration_and_potential_thread</name>
        <qualifiedname>Cylinder::determine_acceleration_and_potential_thread</qualifiedname>
        <reimplements refid="class_pot_accel_1a45b09387fd7083e15a11522454f4c4b3">determine_acceleration_and_potential_thread</reimplements>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Multithreading implementation of the force computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="153" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a31fffadf7f868525edeb6b561357f8bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients</name>
        <qualifiedname>Cylinder::determine_coefficients</qualifiedname>
        <reimplements refid="class_pot_accel_1a30dac3c15c2a7a67e9860e086cda27b8">determine_coefficients</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by get_acceleration_and_potential to request that the expansion be performed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="141" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a31fffadf7f868525edeb6b561357f8bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients</name>
        <qualifiedname>Cylinder::determine_coefficients</qualifiedname>
        <reimplements refid="class_pot_accel_1a30dac3c15c2a7a67e9860e086cda27b8">determine_coefficients</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by get_acceleration_and_potential to request that the expansion be performed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="141" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a48b39d1e3e02f172018bccc4dd8ad842" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients_eof</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients_eof</name>
        <qualifiedname>Cylinder::determine_coefficients_eof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="147" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a48b39d1e3e02f172018bccc4dd8ad842" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients_eof</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients_eof</name>
        <qualifiedname>Cylinder::determine_coefficients_eof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="147" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a9fa4938d576706cd9f654975fdc34f7e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients_particles</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients_particles</name>
        <qualifiedname>Cylinder::determine_coefficients_particles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="145" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a9fa4938d576706cd9f654975fdc34f7e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients_particles</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients_particles</name>
        <qualifiedname>Cylinder::determine_coefficients_particles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="145" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a84c2eeb8f441c58f78512edf8d5a3f98" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients_playback</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients_playback</name>
        <qualifiedname>Cylinder::determine_coefficients_playback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="143" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a84c2eeb8f441c58f78512edf8d5a3f98" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_coefficients_playback</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients_playback</name>
        <qualifiedname>Cylinder::determine_coefficients_playback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="143" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a2362b4060aa3fb06b5b8de448ae61f81" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * Cylinder::determine_coefficients_thread</definition>
        <argsstring>(void *arg)</argsstring>
        <name>determine_coefficients_thread</name>
        <qualifiedname>Cylinder::determine_coefficients_thread</qualifiedname>
        <reimplements refid="class_pot_accel_1a28536cd936e5c94562d5bccff2470d49">determine_coefficients_thread</reimplements>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Multithreading implementation of the expansion computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="151" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a2362b4060aa3fb06b5b8de448ae61f81" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * Cylinder::determine_coefficients_thread</definition>
        <argsstring>(void *arg)</argsstring>
        <name>determine_coefficients_thread</name>
        <qualifiedname>Cylinder::determine_coefficients_thread</qualifiedname>
        <reimplements refid="class_pot_accel_1a28536cd936e5c94562d5bccff2470d49">determine_coefficients_thread</reimplements>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Multithreading implementation of the expansion computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="151" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a0da47f0873d61edd6c7733115de9f143" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::initialize</definition>
        <argsstring>(void)</argsstring>
        <name>initialize</name>
        <qualifiedname>Cylinder::initialize</qualifiedname>
        <reimplements refid="class_pot_accel_1ada60d03bc82b8740fc7275d4c3f2149d">initialize</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Used by derived class to initialize any storage and parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="127" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a0da47f0873d61edd6c7733115de9f143" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::initialize</definition>
        <argsstring>(void)</argsstring>
        <name>initialize</name>
        <qualifiedname>Cylinder::initialize</qualifiedname>
        <reimplements refid="class_pot_accel_1ada60d03bc82b8740fc7275d4c3f2149d">initialize</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Used by derived class to initialize any storage and parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="127" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a4ccd3920ba81aabc5051840b7c0d5875" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_reset</definition>
        <argsstring>()</argsstring>
        <name>multistep_reset</name>
        <qualifiedname>Cylinder::multistep_reset</qualifiedname>
        <reimplements refid="class_pot_accel_1aaada1d8e8970e63332269b0d00aed97f">multistep_reset</reimplements>
        <briefdescription>
<para>Reset used particle counter and mass registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="162" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a4ccd3920ba81aabc5051840b7c0d5875" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_reset</definition>
        <argsstring>()</argsstring>
        <name>multistep_reset</name>
        <qualifiedname>Cylinder::multistep_reset</qualifiedname>
        <reimplements refid="class_pot_accel_1aaada1d8e8970e63332269b0d00aed97f">multistep_reset</reimplements>
        <briefdescription>
<para>Reset used particle counter and mass registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="170" column="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_cylinder_1a07457e19eb28e7c4b204e26d31c1b267" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::getCoefs</definition>
        <argsstring>(Eigen::MatrixXcd &amp;C)</argsstring>
        <name>getCoefs</name>
        <qualifiedname>Cylinder::getCoefs</qualifiedname>
        <param>
          <type>Eigen::MatrixXcd &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Store coefficients from <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="280" column="8" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="280" bodyend="288"/>
        <references refid="class_cylinder_1a12ec434b1c079bf422d74f09034177a2" compoundref="_cylinder_8_h" startline="131">mmax</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a07457e19eb28e7c4b204e26d31c1b267" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::getCoefs</definition>
        <argsstring>(Eigen::MatrixXcd &amp;C)</argsstring>
        <name>getCoefs</name>
        <qualifiedname>Cylinder::getCoefs</qualifiedname>
        <param>
          <type>Eigen::MatrixXcd &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Store coefficients from <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="279" column="8" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="279" bodyend="287"/>
        <references refid="class_cylinder_1a12ec434b1c079bf422d74f09034177a2" compoundref="_cylinder_8_h" startline="131">mmax</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1ae05f092861f7abbd4addc7f158d34e52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::occt_output</definition>
        <argsstring>()</argsstring>
        <name>occt_output</name>
        <qualifiedname>Cylinder::occt_output</qualifiedname>
        <briefdescription>
<para>Print deep debugging data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="258" column="8"/>
        <referencedby refid="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" compoundref="_cylinder_8_h" startline="432" endline="438">multistep_update_finish</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a717a3d56d06af595e0ed1fe364b2525b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::setCoefs</definition>
        <argsstring>(Eigen::MatrixXcd &amp;C)</argsstring>
        <name>setCoefs</name>
        <qualifiedname>Cylinder::setCoefs</qualifiedname>
        <param>
          <type>Eigen::MatrixXcd &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Installed stored coefficients in <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="291" column="8" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="291" bodyend="298"/>
        <references refid="class_cylinder_1a12ec434b1c079bf422d74f09034177a2" compoundref="_cylinder_8_h" startline="131">mmax</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a717a3d56d06af595e0ed1fe364b2525b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::setCoefs</definition>
        <argsstring>(Eigen::MatrixXcd &amp;C)</argsstring>
        <name>setCoefs</name>
        <qualifiedname>Cylinder::setCoefs</qualifiedname>
        <param>
          <type>Eigen::MatrixXcd &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Installed stored coefficients in <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="290" column="8" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="290" bodyend="297"/>
        <references refid="class_cylinder_1a12ec434b1c079bf422d74f09034177a2" compoundref="_cylinder_8_h" startline="131">mmax</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cylinder_1a32f6f757b5d7f130a7a3582077ff990a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Cylinder::Cylinder</definition>
        <argsstring>(Component *c0, const YAML::Node &amp;conf, MixtureBasis *m=0)</argsstring>
        <name>Cylinder</name>
        <qualifiedname>Cylinder::Cylinder</qualifiedname>
        <param>
          <type><ref refid="class_component" kindref="compound">Component</ref> *</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="class_mixture_basis" kindref="compound">MixtureBasis</ref> *</type>
          <declname>m</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the instantiating caller (a <ref refid="class_component" kindref="compound">Component</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the parameters passed to the method </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="class_mixture_basis" kindref="compound">MixtureBasis</ref> for a multicenter expansion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Parameters settable in the configuration line include: <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the disk scale length for the basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hcyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the disk scale height for the basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmaxfid</parametername>
</parameternamelist>
<parameterdescription>
<para>is the radial order for the underlying spherical basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmaxfid</parametername>
</parameternamelist>
<parameterdescription>
<para>is the harmonic order for the underlying spherical basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the azimuthal harmonic order for final cylindrical expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mlim</parametername>
</parameternamelist>
<parameterdescription>
<para>restricts the azimuthal harmonic order for testing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylnx</parametername>
</parameternamelist>
<parameterdescription>
<para>is the radial grid in the basis function table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylny</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vertical grid in the basis function table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the spherical radial grid used to construct the cylindrical basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the order of the radial expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylodd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of terms with vertically antisymmetric parity out of ncylorder. If unspecified, you will get the original variance order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylrecomp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of steps between basis recomputation (default: -1 which means NEVER) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of steps between Hall coefficient recomputaton </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first step for Hall coefficient computaton </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvtk</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of step VTK output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcadiag</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true enables PCA output diagnostics (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cachename</parametername>
</parameternamelist>
<parameterdescription>
<para>is the file for the EOF basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vflag</parametername>
</parameternamelist>
<parameterdescription>
<para>sets verbosity (see EmpCylSL.cc) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of <ref refid="class_legendre" kindref="compound">Legendre</ref> radial knots for numerical basis computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of azimuthal knots for numerical basis computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of <ref refid="class_legendre" kindref="compound">Legendre</ref> polar knots for numerical basis computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ashift</parametername>
</parameternamelist>
<parameterdescription>
<para>is the shift applied in the x-axis relative to the original for basis conditioning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_consistent</parametername>
</parameternamelist>
<parameterdescription>
<para>set to false for fixed potential </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precond</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true for analytic basis function conditioning (default: true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logr</parametername>
</parameternamelist>
<parameterdescription>
<para>tabulate basis in logarithmic coordinates (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavar</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true for real-time Hall analysis (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplesz</parametername>
</parameternamelist>
<parameterdescription>
<para>is the default particle number in PCA subsampling partitions (default is 1). The value 0 sets the sample size to sqrt(N). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavtk</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true dumps PCA functions in VTK format for diagnostics (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>try_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true means try to read basis from cache (default: true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dump_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true outputs basis into file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapR</parametername>
</parameternamelist>
<parameterdescription>
<para>selects the radial coordinate mapping (default: 2, power mapping) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapZ</parametername>
</parameternamelist>
<parameterdescription>
<para>selects the vertical coordinate mapping (default: 1, sinh mapping) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="352" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a32f6f757b5d7f130a7a3582077ff990a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Cylinder::Cylinder</definition>
        <argsstring>(Component *c0, const YAML::Node &amp;conf, MixtureBasis *m=0)</argsstring>
        <name>Cylinder</name>
        <qualifiedname>Cylinder::Cylinder</qualifiedname>
        <param>
          <type><ref refid="class_component" kindref="compound">Component</ref> *</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="class_mixture_basis" kindref="compound">MixtureBasis</ref> *</type>
          <declname>m</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the instantiating caller (a <ref refid="class_component" kindref="compound">Component</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the parameters passed to the method </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="class_mixture_basis" kindref="compound">MixtureBasis</ref> for a multicenter expansion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Parameters settable in the configuration line include: <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the disk scale length for the basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hcyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the disk scale height for the basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the radial order for the underlying spherical basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the harmonic order for the underlying spherical basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the azimuthal harmonic order for final cylindrical expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mlim</parametername>
</parameternamelist>
<parameterdescription>
<para>restricts the azimuthal harmonic order for testing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylnx</parametername>
</parameternamelist>
<parameterdescription>
<para>is the radial grid in the basis function table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylny</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vertical grid in the basis function table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the spherical radial grid used to construct the cylindrical basis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylorder</parametername>
</parameternamelist>
<parameterdescription>
<para>is the order of the radial expansion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylodd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of terms with vertically antisymmetric parity out of ncylorder. If unspecified, you will get the original variance order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylrecomp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of steps between basis recomputation (default: -1 which means NEVER) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of steps between Hall coefficient recomputaton </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first step for Hall coefficient computaton </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvtk</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of step VTK output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcadiag</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true enables PCA output diagnostics (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cachename</parametername>
</parameternamelist>
<parameterdescription>
<para>is an override for the default EOF cache file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vflag</parametername>
</parameternamelist>
<parameterdescription>
<para>sets verbosity (see EmpCylSL.cc) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of <ref refid="class_legendre" kindref="compound">Legendre</ref> radial knots for numerical basis computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of azimuthal knots for numerical basis computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of <ref refid="class_legendre" kindref="compound">Legendre</ref> polar knots for numerical basis computation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ashift</parametername>
</parameternamelist>
<parameterdescription>
<para>is the shift applied in the x-axis relative to the original for basis conditioning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_consistent</parametername>
</parameternamelist>
<parameterdescription>
<para>set to false for fixed potential </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expcond</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true for analytic basis function conditioning (default: true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logr</parametername>
</parameternamelist>
<parameterdescription>
<para>tabulate basis in logarithmic coordinates (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavar</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true for real-time Hall analysis (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplesz</parametername>
</parameternamelist>
<parameterdescription>
<para>is the default particle number in PCA subsampling partitions (default is 1). The value 0 sets the sample size to sqrt(N). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavtk</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true dumps PCA functions in VTK format for diagnostics (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>try_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true means try to read basis from cache (default: true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dump_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true outputs basis into file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true means compute density basis in addition to potential (default: false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapR</parametername>
</parameternamelist>
<parameterdescription>
<para>selects the radial coordinate mapping (default: 2, power mapping) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapZ</parametername>
</parameternamelist>
<parameterdescription>
<para>selects the vertical coordinate mapping (default: 1, sinh mapping) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="352" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a4cffcad313069e21b01a648d656f2296" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point</definition>
        <argsstring>(double x, double y, double z, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotx, double *tpoty, double *tpotz)</argsstring>
        <name>determine_fields_at_point</name>
        <qualifiedname>Cylinder::determine_fields_at_point</qualifiedname>
        <reimplements refid="class_basis_1a8d4bece8ddfe81223177e63d76779284">determine_fields_at_point</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpoty</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotz</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in Cartesian coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="406" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a4cffcad313069e21b01a648d656f2296" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point</definition>
        <argsstring>(double x, double y, double z, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotx, double *tpoty, double *tpotz)</argsstring>
        <name>determine_fields_at_point</name>
        <qualifiedname>Cylinder::determine_fields_at_point</qualifiedname>
        <reimplements refid="class_basis_1a8d4bece8ddfe81223177e63d76779284">determine_fields_at_point</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpoty</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotz</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in Cartesian coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="406" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a48d17ba2d4a5597c76e32050e40f54d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point_cyl</definition>
        <argsstring>(double r, double z, double phi, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotr, double *tpotz, double *tpotp)</argsstring>
        <name>determine_fields_at_point_cyl</name>
        <qualifiedname>Cylinder::determine_fields_at_point_cyl</qualifiedname>
        <reimplements refid="class_basis_1a3bcc5e3250f82d0ce476b096eabf342a">determine_fields_at_point_cyl</reimplements>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotp</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in cylindrical coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="370" column="3"/>
        <referencedby refid="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" compoundref="_cylinder_8_h" startline="378" endline="402">determine_fields_at_point_cyl</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a48d17ba2d4a5597c76e32050e40f54d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point_cyl</definition>
        <argsstring>(double r, double z, double phi, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotr, double *tpotz, double *tpotp)</argsstring>
        <name>determine_fields_at_point_cyl</name>
        <qualifiedname>Cylinder::determine_fields_at_point_cyl</qualifiedname>
        <reimplements refid="class_basis_1a3bcc5e3250f82d0ce476b096eabf342a">determine_fields_at_point_cyl</reimplements>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotp</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in cylindrical coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="370" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point_cyl</definition>
        <argsstring>(double r, double z, double phi, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotr, double *tpotz, double *tpotp, int mmin, int mlim)</argsstring>
        <name>determine_fields_at_point_cyl</name>
        <qualifiedname>Cylinder::determine_fields_at_point_cyl</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mmin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlim</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in cylindrical coordinates with limits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="378" column="3" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="378" bodyend="402"/>
        <references refid="class_cylinder_1a48d17ba2d4a5597c76e32050e40f54d1">determine_fields_at_point_cyl</references>
        <references refid="class_cylinder_1a9234ee393feef01aad1ca212f09cd79d" compoundref="_cylinder_8_h" startline="131">mlim</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point_cyl</definition>
        <argsstring>(double r, double z, double phi, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotr, double *tpotz, double *tpotp, int mmin, int mlim)</argsstring>
        <name>determine_fields_at_point_cyl</name>
        <qualifiedname>Cylinder::determine_fields_at_point_cyl</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mmin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlim</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in cylindrical coordinates with limits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="378" column="3" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="378" bodyend="402"/>
        <references refid="class_cylinder_1a48d17ba2d4a5597c76e32050e40f54d1">determine_fields_at_point_cyl</references>
        <references refid="class_cylinder_1a9234ee393feef01aad1ca212f09cd79d" compoundref="_cylinder_8_h" startline="131">mlim</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a021dbbef8f761e75fef8f25316bb71c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point_sph</definition>
        <argsstring>(double r, double theta, double phi, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotr, double *tpott, double *tpotp)</argsstring>
        <name>determine_fields_at_point_sph</name>
        <qualifiedname>Cylinder::determine_fields_at_point_sph</qualifiedname>
        <reimplements refid="class_basis_1a34f7d4340bcd0c5452f430cebf5c3665">determine_fields_at_point_sph</reimplements>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpott</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotp</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in spherical polar coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="362" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a021dbbef8f761e75fef8f25316bb71c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::determine_fields_at_point_sph</definition>
        <argsstring>(double r, double theta, double phi, double *tdens0, double *tpotl0, double *tdens, double *tpotl, double *tpotr, double *tpott, double *tpotp)</argsstring>
        <name>determine_fields_at_point_sph</name>
        <qualifiedname>Cylinder::determine_fields_at_point_sph</qualifiedname>
        <reimplements refid="class_basis_1a34f7d4340bcd0c5452f430cebf5c3665">determine_fields_at_point_sph</reimplements>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tdens</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpott</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tpotp</declname>
        </param>
        <briefdescription>
<para>Return the value for the fields in spherical polar coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="362" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a15c516b5506bd769ee4cca1f5c838e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::dump_coefs</definition>
        <argsstring>(ostream &amp;out)</argsstring>
        <name>dump_coefs</name>
        <qualifiedname>Cylinder::dump_coefs</qualifiedname>
        <reimplements refid="class_pot_accel_1a10f4dd971b1a056bb6dacf01f2e2bcbf">dump_coefs</reimplements>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save coefficients to file (need type marker to id dump, component id?) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="458" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a15c516b5506bd769ee4cca1f5c838e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::dump_coefs</definition>
        <argsstring>(ostream &amp;out)</argsstring>
        <name>dump_coefs</name>
        <qualifiedname>Cylinder::dump_coefs</qualifiedname>
        <reimplements refid="class_pot_accel_1a10f4dd971b1a056bb6dacf01f2e2bcbf">dump_coefs</reimplements>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save coefficients to file (need type marker to id dump, component id?) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="432" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a0e2194b76e3515007c157ddf7f1dbe72" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::dump_coefs_h5</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>dump_coefs_h5</name>
        <qualifiedname>Cylinder::dump_coefs_h5</qualifiedname>
        <reimplements refid="class_pot_accel_1ac53a3ab4bdfa2be33fbe4286b939230c">dump_coefs_h5</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Save coefficients to named HDF5 file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="461" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a0e2194b76e3515007c157ddf7f1dbe72" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::dump_coefs_h5</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>dump_coefs_h5</name>
        <qualifiedname>Cylinder::dump_coefs_h5</qualifiedname>
        <reimplements refid="class_pot_accel_1ac53a3ab4bdfa2be33fbe4286b939230c">dump_coefs_h5</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Save coefficients to named HDF5 file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="435" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1af4c04de3b6630da024459d91ede1e2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::dump_mzero</definition>
        <argsstring>(const string &amp;name, int step)</argsstring>
        <name>dump_mzero</name>
        <qualifiedname>Cylinder::dump_mzero</qualifiedname>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Sanity check on grid: dumps SM-style images of initial field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="464" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1af4c04de3b6630da024459d91ede1e2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cylinder::dump_mzero</definition>
        <argsstring>(const string &amp;name, int step)</argsstring>
        <name>dump_mzero</name>
        <qualifiedname>Cylinder::dump_mzero</qualifiedname>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Sanity check on grid: dumps SM-style images of initial field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="438" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a7eedc780551196e17ce0949acf5c951c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::get_acceleration_and_potential</definition>
        <argsstring>(Component *)</argsstring>
        <name>get_acceleration_and_potential</name>
        <qualifiedname>Cylinder::get_acceleration_and_potential</qualifiedname>
        <reimplements refid="class_pot_accel_1ab78f20762031db204f636fc8e74ea986">get_acceleration_and_potential</reimplements>
        <param>
          <type><ref refid="class_component" kindref="compound">Component</ref> *</type>
        </param>
        <briefdescription>
<para>The main force call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="358" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a7eedc780551196e17ce0949acf5c951c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cylinder::get_acceleration_and_potential</definition>
        <argsstring>(Component *)</argsstring>
        <name>get_acceleration_and_potential</name>
        <qualifiedname>Cylinder::get_acceleration_and_potential</qualifiedname>
        <reimplements refid="class_pot_accel_1ab78f20762031db204f636fc8e74ea986">get_acceleration_and_potential</reimplements>
        <param>
          <type><ref refid="class_component" kindref="compound">Component</ref> *</type>
        </param>
        <briefdescription>
<para>The main force call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="358" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a57315dc95a1b474e33109007f654c20e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_add_debug</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; std::pair&lt; unsigned, unsigned &gt; &gt; &gt; &amp;data)</argsstring>
        <name>multistep_add_debug</name>
        <qualifiedname>Cylinder::multistep_add_debug</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::pair&lt; unsigned, unsigned &gt; &gt; &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Multistep accumulate debugging info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="442" column="16" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="443" bodyend="452"/>
        <references refid="class_cylinder_1a9e99f36b08c657530c89e07423ad0cbe" compoundref="_cylinder_8_h" startline="255">occt</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1ad8f35bcf5fa4a3b686c63b23a1b497b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_debug</definition>
        <argsstring>()</argsstring>
        <name>multistep_debug</name>
        <qualifiedname>Cylinder::multistep_debug</qualifiedname>
        <reimplements refid="class_pot_accel_1a2ba58ca0219d337b13c87697353d4121">multistep_debug</reimplements>
        <briefdescription>
<para>Print debug info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="455" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1ad8f35bcf5fa4a3b686c63b23a1b497b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_debug</definition>
        <argsstring>()</argsstring>
        <name>multistep_debug</name>
        <qualifiedname>Cylinder::multistep_debug</qualifiedname>
        <reimplements refid="class_pot_accel_1a2ba58ca0219d337b13c87697353d4121">multistep_debug</reimplements>
        <briefdescription>
<para>Print debug info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="429" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1afbf22ebc466872639f53e2dcd4847975" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_update</definition>
        <argsstring>(int cur, int next, Component *c, int i, int id)</argsstring>
        <name>multistep_update</name>
        <qualifiedname>Cylinder::multistep_update</qualifiedname>
        <reimplements refid="class_pot_accel_1aa6c3661783144fd643ebaf1a2fa6278a">multistep_update</reimplements>
        <param>
          <type>int</type>
          <declname>cur</declname>
        </param>
        <param>
          <type>int</type>
          <declname>next</declname>
        </param>
        <param>
          <type><ref refid="class_component" kindref="compound">Component</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Implementation of level shifts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="431" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1afbf22ebc466872639f53e2dcd4847975" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_update</definition>
        <argsstring>(int cur, int next, Component *c, int i, int id)</argsstring>
        <name>multistep_update</name>
        <qualifiedname>Cylinder::multistep_update</qualifiedname>
        <reimplements refid="class_pot_accel_1aa6c3661783144fd643ebaf1a2fa6278a">multistep_update</reimplements>
        <param>
          <type>int</type>
          <declname>cur</declname>
        </param>
        <param>
          <type>int</type>
          <declname>next</declname>
        </param>
        <param>
          <type><ref refid="class_component" kindref="compound">Component</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Implementation of level shifts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="421" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_update_begin</definition>
        <argsstring>()</argsstring>
        <name>multistep_update_begin</name>
        <qualifiedname>Cylinder::multistep_update_begin</qualifiedname>
        <reimplements refid="class_pot_accel_1a0e720b605350a9fb4e0d24dae2a1c381">multistep_update_begin</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the multi time step coefficient table when moving particle <computeroutput>i</computeroutput> from level <computeroutput>cur</computeroutput> to level <computeroutput>next</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="417" column="16" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="417" bodyend="430"/>
        <references refid="class_pot_accel_1aa6d9bde455e08dc9fead4f152357cb15" compoundref="_pot_accel_8_h" startline="56">PotAccel::component</references>
        <references refid="global_8_h_1ace19188521d679179f62686801a17451">mdrft</references>
        <references refid="class_component_1a1259cf1d6c00ec47422860f945a11284" compoundref="_component_8_h" startline="965" endline="965">Component::NoSwitch</references>
        <references refid="class_cylinder_1a9e99f36b08c657530c89e07423ad0cbe" compoundref="_cylinder_8_h" startline="255">occt</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
        <references refid="class_pot_accel_1a74b41dd5c2f102dd3184ac53b6172462" compoundref="_pot_accel_8_h" startline="74">PotAccel::play_back</references>
        <references refid="class_pot_accel_1aea1c756cd9616a1daf73541780b45798" compoundref="_pot_accel_8_h" startline="77">PotAccel::play_cnew</references>
        <references refid="class_cylinder_1a565762a9935614e789d776b6dad1560c" compoundref="_cylinder_8_h" startline="136">self_consistent</references>
        <references refid="global_8_h_1a75043af440748a82fcf73bb6948b476e">this_step</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_update_begin</definition>
        <argsstring>()</argsstring>
        <name>multistep_update_begin</name>
        <qualifiedname>Cylinder::multistep_update_begin</qualifiedname>
        <reimplements refid="class_pot_accel_1a0e720b605350a9fb4e0d24dae2a1c381">multistep_update_begin</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the multi time step coefficient table when moving particle <computeroutput>i</computeroutput> from level <computeroutput>cur</computeroutput> to level <computeroutput>next</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="417" column="16" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="417" bodyend="420"/>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
        <references refid="class_pot_accel_1a74b41dd5c2f102dd3184ac53b6172462" compoundref="_pot_accel_8_h" startline="74">PotAccel::play_back</references>
        <references refid="class_pot_accel_1aea1c756cd9616a1daf73541780b45798" compoundref="_pot_accel_8_h" startline="77">PotAccel::play_cnew</references>
        <references refid="class_cylinder_1a565762a9935614e789d776b6dad1560c" compoundref="_cylinder_8_h" startline="136">self_consistent</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_update_finish</definition>
        <argsstring>()</argsstring>
        <name>multistep_update_finish</name>
        <qualifiedname>Cylinder::multistep_update_finish</qualifiedname>
        <reimplements refid="class_pot_accel_1acb0c9d88466949f2bf84da42439f2a1e">multistep_update_finish</reimplements>
        <briefdescription>
<para>Execute to finish level shifts for particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="432" column="16" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="432" bodyend="438"/>
        <references refid="class_cylinder_1ae05f092861f7abbd4addc7f158d34e52">occt_output</references>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
        <references refid="class_pot_accel_1a74b41dd5c2f102dd3184ac53b6172462" compoundref="_pot_accel_8_h" startline="74">PotAccel::play_back</references>
        <references refid="class_pot_accel_1aea1c756cd9616a1daf73541780b45798" compoundref="_pot_accel_8_h" startline="77">PotAccel::play_cnew</references>
        <references refid="class_cylinder_1a565762a9935614e789d776b6dad1560c" compoundref="_cylinder_8_h" startline="136">self_consistent</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Cylinder::multistep_update_finish</definition>
        <argsstring>()</argsstring>
        <name>multistep_update_finish</name>
        <qualifiedname>Cylinder::multistep_update_finish</qualifiedname>
        <reimplements refid="class_pot_accel_1acb0c9d88466949f2bf84da42439f2a1e">multistep_update_finish</reimplements>
        <briefdescription>
<para>Execute to finish level shifts for particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="422" column="16" bodyfile="/home/weinberg/Projects/EXP/src/CylTwoD.H" bodystart="422" bodyend="425"/>
        <references refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" compoundref="_cylinder_8_h" startline="118">ortho</references>
        <references refid="class_pot_accel_1a74b41dd5c2f102dd3184ac53b6172462" compoundref="_pot_accel_8_h" startline="74">PotAccel::play_back</references>
        <references refid="class_pot_accel_1aea1c756cd9616a1daf73541780b45798" compoundref="_pot_accel_8_h" startline="77">PotAccel::play_cnew</references>
        <references refid="class_cylinder_1a565762a9935614e789d776b6dad1560c" compoundref="_cylinder_8_h" startline="136">self_consistent</references>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a62b974fc969958cc05fa7d72cb5a4395" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Cylinder::~Cylinder</definition>
        <argsstring>()</argsstring>
        <name>~Cylinder</name>
        <qualifiedname>Cylinder::~Cylinder</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="355" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_cylinder_1a62b974fc969958cc05fa7d72cb5a4395" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Cylinder::~Cylinder</definition>
        <argsstring>()</argsstring>
        <name>~Cylinder</name>
        <qualifiedname>Cylinder::~Cylinder</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/src/CylTwoD.H" line="355" column="11"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This routine computes the potential, acceleration and density using the Cylindrical biorthogonal expansion</para>
<para>Configuration parameters:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rcylmin</parametername>
</parameternamelist>
<parameterdescription>
<para>is the minimum cylindrical grid radius in scale-length units</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcylmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum cylindrical grid radius in scale-length units</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the scale length</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hcyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the scale height</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum spherical harmonic index for EOF construction</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum azimuthal order for the resulting basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mlim</parametername>
</parameternamelist>
<parameterdescription>
<para>applies a limit &lt;= mmax without basis reconstruction</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylnx</parametername>
</parameternamelist>
<parameterdescription>
<para>is the grid size for the cylindrical radius axis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylny</parametername>
</parameternamelist>
<parameterdescription>
<para>is the grid size for the vertical axis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylr</parametername>
</parameternamelist>
<parameterdescription>
<para>radial grid size for basis computation (NUMR in <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref>)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylorder</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum order in for each harmonic m for the new basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylodd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of vertically antisymmetric basis functions out of the total ncylorder</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylrecomp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the frequency of basis recompution during a running simulation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number steps between PCA variance/error analyses</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number steps to skip before the first PCA variance/error analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvtk</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number steps between vtk visualization output for the PCA variance/error analyses</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cachename</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the basis cache file</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplesz</parametername>
</parameternamelist>
<parameterdescription>
<para>is the default particle number in PCA subsampling partitions (default is 1). The value 0 sets the sample size to sqrt(N).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnum</parametername>
</parameternamelist>
<parameterdescription>
<para>if the size of the radial quadrature grid for analytic EOF computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnum</parametername>
</parameternamelist>
<parameterdescription>
<para>if the size of the azimuthal quadrature grid for analytic EOF computation (set to 1 if model is axisymmetric)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the equitorial quadrature grid for analytic EOF computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ashift</parametername>
</parameternamelist>
<parameterdescription>
<para>offsets the center of the analytic model for basis function computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precond</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean true turns on analytic basis function preconditioning (default: true)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logr</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean turns on logarithmic radial basis gridding in <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavar</parametername>
</parameternamelist>
<parameterdescription>
<para>turns on variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcaeof</parametername>
</parameternamelist>
<parameterdescription>
<para>turns on basis conditioning based on variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcadiag</parametername>
</parameternamelist>
<parameterdescription>
<para>logs diagnostic output for variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavtk</parametername>
</parameternamelist>
<parameterdescription>
<para>turns on VTK visualization diagnostic output for variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Hall sharpness parameter</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the signal-to-noise prefactor for sharpness computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evcut</parametername>
</parameternamelist>
<parameterdescription>
<para>is the cumulative trim remainder on the covariance eigenvalues (default: -1, which implies no trimming). Set to small positive value for trimming.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>try_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>false suppresses cache reading on restart (default: true)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EVEN_M</parametername>
</parameternamelist>
<parameterdescription>
<para>true uses even harmonic orders only</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>is the coordinate mapping type (deprecated but kept for backward consistency)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the radial coordinate mapping type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapz</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vertical coordinate mapping type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_consistent</parametername>
</parameternamelist>
<parameterdescription>
<para>set to false turns off potential expansion; only performed the first time</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>playback</parametername>
</parameternamelist>
<parameterdescription>
<para>file reads a coefficient file and uses it to compute the basis function output for resimiulation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>python</parametername>
</parameternamelist>
<parameterdescription>
<para>is the file name of Python module which supplies the &apos;disk_density&apos; function for conditioning the cylindrical basis. A non-null string triggers the use of the Python interpreter to evaluate the target density function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This routine computes the potential, acceleration and density using the Cylindrical biorthogonal expansion</para>
<para>Configuration parameters:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rcylmin</parametername>
</parameternamelist>
<parameterdescription>
<para>is the minimum cylindrical grid radius in scale-length units</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcylmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum cylindrical grid radius in scale-length units</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the scale length</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hcyl</parametername>
</parameternamelist>
<parameterdescription>
<para>is the scale height</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum spherical harmonic index for EOF construction</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum azimuthal order for the resulting basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mlim</parametername>
</parameternamelist>
<parameterdescription>
<para>applies a limit &lt;= mmax without basis reconstruction</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylnx</parametername>
</parameternamelist>
<parameterdescription>
<para>is the grid size for the cylindrical radius axis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylny</parametername>
</parameternamelist>
<parameterdescription>
<para>is the grid size for the vertical axis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylr</parametername>
</parameternamelist>
<parameterdescription>
<para>radial grid size for basis computation (NUMR in <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref>)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylorder</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum order in for each harmonic m for the new basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylodd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of vertically antisymmetric basis functions out of the total ncylorder</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncylrecomp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the frequency of basis recompution during a running simulation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number steps between PCA variance/error analyses</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npca0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number steps to skip before the first PCA variance/error analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvtk</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number steps between vtk visualization output for the PCA variance/error analyses</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cachename</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the basis cache file</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>override</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean ignores the specificed cache file name and performes a recomputation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplesz</parametername>
</parameternamelist>
<parameterdescription>
<para>is the default particle number in PCA subsampling partitions (default is 1). The value 0 sets the sample size to sqrt(N).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnum</parametername>
</parameternamelist>
<parameterdescription>
<para>if the size of the radial quadrature grid for analytic EOF computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnum</parametername>
</parameternamelist>
<parameterdescription>
<para>if the size of the azimuthal quadrature grid for analytic EOF computation (set to 1 if model is axisymmetric)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tnum</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the equitorial quadrature grid for analytic EOF computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ashift</parametername>
</parameternamelist>
<parameterdescription>
<para>offsets the center of the analytic model for basis function computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expcond</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean true turns on basis function reconditioning</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logr</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean turns on logarithmic radial basis gridding in <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavar</parametername>
</parameternamelist>
<parameterdescription>
<para>turns on variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcaeof</parametername>
</parameternamelist>
<parameterdescription>
<para>turns on basis conditioning based on variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcadiag</parametername>
</parameternamelist>
<parameterdescription>
<para>logs diagnostic output for variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcavtk</parametername>
</parameternamelist>
<parameterdescription>
<para>turns on VTK visualization diagnostic output for variance analysis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Hall sharpness parameter</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the signal-to-noise prefactor for sharpness computation</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evcut</parametername>
</parameternamelist>
<parameterdescription>
<para>is the cumulative trim remainder on the covariance eigenvalues (default: -1, which implies no trimming). Set to small positive value for trimming.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>try_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>false suppresses cache reading on restart (default: true)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>builds grid with density fields (e.g. for post processing)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>EVEN_M</parametername>
</parameternamelist>
<parameterdescription>
<para>true uses even harmonic orders only</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>is the coordinate mapping type (deprecated but kept for backward consistency)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the radial coordinate mapping type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmapz</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vertical coordinate mapping type</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_consistent</parametername>
</parameternamelist>
<parameterdescription>
<para>set to false turns off potential expansion; only performed the first time</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>playback</parametername>
</parameternamelist>
<parameterdescription>
<para>file reads a coefficient file and uses it to compute the basis function output for resimiulation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Basis</label>
        <link refid="class_basis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Cylinder</label>
        <link refid="class_cylinder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>PotAccel</label>
        <link refid="class_pot_accel"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Basis</label>
        <link refid="class_basis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Component</label>
        <link refid="class_component"/>
        <childnode refid="5" relation="usage">
          <edgelabel>c0</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>force</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>orient</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>time_so_far</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Cylinder</label>
        <link refid="class_cylinder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mix</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>EL3</label>
        <link refid="class_e_l3"/>
      </node>
      <node id="9">
        <label>MixtureBasis</label>
        <link refid="class_mixture_basis"/>
        <childnode refid="10" relation="usage">
          <edgelabel>p</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Orient</label>
        <link refid="class_orient"/>
        <childnode refid="7" relation="usage">
          <edgelabel>t</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>PotAccel</label>
        <link refid="class_pot_accel"/>
        <childnode refid="4" relation="usage">
          <edgelabel>td</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>cC</edgelabel>
          <edgelabel>component</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>Timer</label>
        <link refid="class_timer"/>
      </node>
      <node id="10">
        <label>TwoCenter</label>
        <link refid="class_two_center"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>exp_in</edgelabel>
          <edgelabel>exp_out</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mix_in</edgelabel>
          <edgelabel>mix_out</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>thrd_pass_PotAccel</label>
        <link refid="structthrd__pass___pot_accel"/>
        <childnode refid="3" relation="usage">
          <edgelabel>t</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/weinberg/Projects/EXP/src/Cylinder.H" line="109" column="1" bodyfile="/home/weinberg/Projects/EXP/src/Cylinder.H" bodystart="110" bodyend="466"/>
    <listofallmembers>
      <member refid="class_cylinder_1a1d58bf255110415e1931d8db2ad0ea76" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>acut</name></member>
      <member refid="class_cylinder_1ace6e78eca47b4eeb70c39cbb5faa7382" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>acyl</name></member>
      <member refid="class_cylinder_1a9c5152a2d3c9f1303edbd4583e852bf7" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ashift</name></member>
      <member refid="class_pot_accel_1a6a637997f73ca85ce78d8c92eec7ad1b" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>atol</name></member>
      <member refid="class_basis_1a3deeb360a898d1c144f7f6ad44813b3e" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>Basis</name></member>
      <member refid="class_cylinder_1aea8a8e1986913f71961bf3164e5f59ba" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>cachename</name></member>
      <member refid="class_pot_accel_1afa2cd3b0bf51e23d8bfc54aac73ef010" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>cC</name></member>
      <member refid="class_pot_accel_1a630b9cdcae4ed4915cc72179fe9821c6" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>cc_lock</name></member>
      <member refid="class_pot_accel_1a944213bbf31fca1508ba817e392b9fc6" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>ClearExternal</name></member>
      <member refid="class_cylinder_1ae87c4698e638dc93937b5a8d327088d2" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>cmapR</name></member>
      <member refid="class_cylinder_1ac31d5bc4433a9f3a3f44a8dd1a242d28" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>cmapZ</name></member>
      <member refid="class_pot_accel_1ac7ab5e578b5b2bbd29fe35738b03d771" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>coef_dump</name></member>
      <member refid="class_cylinder_1a82abc17e0b1611dd2879b108a1f12b6d" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>coefMaster</name></member>
      <member refid="class_pot_accel_1aa6d9bde455e08dc9fead4f152357cb15" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>component</name></member>
      <member refid="class_cylinder_1a408307e5a429e0ba50cbd0b1aa55bd7f" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>compute</name></member>
      <member refid="class_cylinder_1a301c653a9d52036222cc9e80d75ef5df" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>compute_grid_mass</name></member>
      <member refid="class_cylinder_1a301c653a9d52036222cc9e80d75ef5df" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>compute_grid_mass</name></member>
      <member refid="class_cylinder_1a8fe6465fcda2c9d81b9986fb30db316a" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>compute_multistep_coefficients</name></member>
      <member refid="class_cylinder_1a8fe6465fcda2c9d81b9986fb30db316a" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>compute_multistep_coefficients</name></member>
      <member refid="class_pot_accel_1ab682d4480d7d2946a7bef7f93ac0c6a0" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>conf</name></member>
      <member refid="class_cylinder_1a939689b3e2921594c2088dd443dbdcd1" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>cos_coef_lock</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fda489785884cf0770efb348b919878bf23" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>cube</name></member>
      <member refid="class_pot_accel_1ac4def6f1c9318d8b49e62a4c9f2d6786" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>cuda_aware</name></member>
      <member refid="class_pot_accel_1a5029810ccad93845aab9919e005bafe0" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>cudaAware</name></member>
      <member refid="class_pot_accel_1a823dbb4c07cab1541d7ee738c6baef99" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>current_keys</name></member>
      <member refid="class_cylinder_1a536f1961a271262c6c73a2cd8b074eab" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>cylCoefs</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fdac215da2d633c31e7278fb1a3dd6af268" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>cylinder</name></member>
      <member refid="class_cylinder_1a32f6f757b5d7f130a7a3582077ff990a" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>Cylinder</name></member>
      <member refid="class_cylinder_1a32f6f757b5d7f130a7a3582077ff990a" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>Cylinder</name></member>
      <member refid="class_cylinder_1a8c4a5ae2696883060a6f5880c207c6d3" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>cylmass</name></member>
      <member refid="class_cylinder_1acee994bfceda72c9a713300bbe384a1e" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>cylmass0</name></member>
      <member refid="class_cylinder_1a9c9f2064fd2e562d144da4dfab80a274" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>defSampT</name></member>
      <member refid="class_cylinder_1aaf9d897ba34c9679899680e239793d57" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>density</name></member>
      <member refid="class_cylinder_1a2052d5c8fe1589f91215058ebd72ec2a" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_acceleration_and_potential</name></member>
      <member refid="class_cylinder_1a2052d5c8fe1589f91215058ebd72ec2a" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_acceleration_and_potential</name></member>
      <member refid="class_cylinder_1a7833c07ea8eeb02353c696114de18fbc" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_acceleration_and_potential_thread</name></member>
      <member refid="class_cylinder_1a7833c07ea8eeb02353c696114de18fbc" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_acceleration_and_potential_thread</name></member>
      <member refid="class_cylinder_1a31fffadf7f868525edeb6b561357f8bd" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_coefficients</name></member>
      <member refid="class_cylinder_1a31fffadf7f868525edeb6b561357f8bd" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_coefficients</name></member>
      <member refid="class_pot_accel_1a3a9722c6b123ba2a0dd3671dec6cf724" prot="public" virt="virtual" ambiguityscope="Basis::"><scope>Cylinder</scope><name>determine_coefficients</name></member>
      <member refid="class_cylinder_1a48b39d1e3e02f172018bccc4dd8ad842" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>determine_coefficients_eof</name></member>
      <member refid="class_cylinder_1a48b39d1e3e02f172018bccc4dd8ad842" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>determine_coefficients_eof</name></member>
      <member refid="class_cylinder_1a9fa4938d576706cd9f654975fdc34f7e" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>determine_coefficients_particles</name></member>
      <member refid="class_cylinder_1a9fa4938d576706cd9f654975fdc34f7e" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>determine_coefficients_particles</name></member>
      <member refid="class_cylinder_1a84c2eeb8f441c58f78512edf8d5a3f98" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>determine_coefficients_playback</name></member>
      <member refid="class_cylinder_1a84c2eeb8f441c58f78512edf8d5a3f98" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>determine_coefficients_playback</name></member>
      <member refid="class_cylinder_1a2362b4060aa3fb06b5b8de448ae61f81" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_coefficients_thread</name></member>
      <member refid="class_cylinder_1a2362b4060aa3fb06b5b8de448ae61f81" prot="private" virt="virtual"><scope>Cylinder</scope><name>determine_coefficients_thread</name></member>
      <member refid="class_cylinder_1a4cffcad313069e21b01a648d656f2296" prot="public" virt="virtual"><scope>Cylinder</scope><name>determine_fields_at_point</name></member>
      <member refid="class_cylinder_1a4cffcad313069e21b01a648d656f2296" prot="public" virt="virtual"><scope>Cylinder</scope><name>determine_fields_at_point</name></member>
      <member refid="class_cylinder_1a48d17ba2d4a5597c76e32050e40f54d1" prot="public" virt="virtual"><scope>Cylinder</scope><name>determine_fields_at_point_cyl</name></member>
      <member refid="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>determine_fields_at_point_cyl</name></member>
      <member refid="class_cylinder_1a48d17ba2d4a5597c76e32050e40f54d1" prot="public" virt="virtual"><scope>Cylinder</scope><name>determine_fields_at_point_cyl</name></member>
      <member refid="class_cylinder_1a93e53590d9d96600f1a761723130dbc0" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>determine_fields_at_point_cyl</name></member>
      <member refid="class_cylinder_1a021dbbef8f761e75fef8f25316bb71c8" prot="public" virt="virtual"><scope>Cylinder</scope><name>determine_fields_at_point_sph</name></member>
      <member refid="class_cylinder_1a021dbbef8f761e75fef8f25316bb71c8" prot="public" virt="virtual"><scope>Cylinder</scope><name>determine_fields_at_point_sph</name></member>
      <member refid="class_basis_1ad9a9f2f2d18335ae482b1d4e12490d0b" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>dlegendre_R</name></member>
      <member refid="class_pot_accel_1a6a9ec23d29b553c1625bd8e88fe7692d" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>dof</name></member>
      <member refid="class_cylinder_1a2cc4974e868067cd4ec3124c5b335361" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>dump_basis</name></member>
      <member refid="class_cylinder_1a15c516b5506bd769ee4cca1f5c838e2a" prot="public" virt="virtual"><scope>Cylinder</scope><name>dump_coefs</name></member>
      <member refid="class_cylinder_1a15c516b5506bd769ee4cca1f5c838e2a" prot="public" virt="virtual"><scope>Cylinder</scope><name>dump_coefs</name></member>
      <member refid="class_cylinder_1a0e2194b76e3515007c157ddf7f1dbe72" prot="public" virt="virtual"><scope>Cylinder</scope><name>dump_coefs_h5</name></member>
      <member refid="class_cylinder_1a0e2194b76e3515007c157ddf7f1dbe72" prot="public" virt="virtual"><scope>Cylinder</scope><name>dump_coefs_h5</name></member>
      <member refid="class_cylinder_1af4c04de3b6630da024459d91ede1e2d1" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>dump_mzero</name></member>
      <member refid="class_cylinder_1af4c04de3b6630da024459d91ede1e2d1" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>dump_mzero</name></member>
      <member refid="class_cylinder_1a29234e95561929d2ed1c79626f2dccb2" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>eof</name></member>
      <member refid="class_cylinder_1a548c38dfaeb2146c30823d9d8011450e" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>eof_over</name></member>
      <member refid="class_cylinder_1aeac28737a74f9054cf9e03b83be54518" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>EVEN_M</name></member>
      <member refid="class_pot_accel_1abee9651463af53460b622250d311329e" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>exp_thread_fork</name></member>
      <member refid="class_cylinder_1a8e8b71b9cd08c7696dc4b89a2b6f59fa" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>expcond</name></member>
      <member refid="class_cylinder_1a7a8b54489da5644c1270b6d37ba21c0d" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>firstime</name></member>
      <member refid="class_cylinder_1a17fbe3eb1e8a1070e5f957883591847f" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>firstime_coef</name></member>
      <member refid="class_cylinder_1a66573150c4ffbdc36a62313b9ae25b04" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>frc</name></member>
      <member refid="class_pot_accel_1adb6ef0bdae7d3520ca1f9fd8a6d648ea" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>geometry</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fd" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>Geometry</name></member>
      <member refid="class_pot_accel_1ade38f6ecdf80f80cde847d463b14909b" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>geoname</name></member>
      <member refid="class_cylinder_1a7eedc780551196e17ce0949acf5c951c" prot="public" virt="virtual"><scope>Cylinder</scope><name>get_acceleration_and_potential</name></member>
      <member refid="class_cylinder_1a7eedc780551196e17ce0949acf5c951c" prot="public" virt="virtual"><scope>Cylinder</scope><name>get_acceleration_and_potential</name></member>
      <member refid="class_cylinder_1a07457e19eb28e7c4b204e26d31c1b267" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>getCoefs</name></member>
      <member refid="class_cylinder_1a07457e19eb28e7c4b204e26d31c1b267" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>getCoefs</name></member>
      <member refid="class_pot_accel_1a0998c361bca277b3bba95f59acaba203" prot="public" virt="virtual"><scope>Cylinder</scope><name>getScale</name></member>
      <member refid="class_pot_accel_1a4a812594dff363f07bf57d69a60e4a13" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>HaveCoefDump</name></member>
      <member refid="class_cylinder_1a291d829623c5dd26906130bb00b976d2" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>hcyl</name></member>
      <member refid="class_cylinder_1a1e1f0fd4455be7bff5fc612603f8bab8" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>hexp</name></member>
      <member refid="class_pot_accel_1a1cdb2381070d7772caf533433455284c" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>id</name></member>
      <member refid="class_cylinder_1a0da47f0873d61edd6c7733115de9f143" prot="private" virt="virtual"><scope>Cylinder</scope><name>initialize</name></member>
      <member refid="class_cylinder_1a0da47f0873d61edd6c7733115de9f143" prot="private" virt="virtual"><scope>Cylinder</scope><name>initialize</name></member>
      <member refid="class_pot_accel_1a706b04f03c8beb4369dd125406770116" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>kill_mutex</name></member>
      <member refid="class_cylinder_1a6be0605baa5de43ff2578d2870818ac7" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>lastPlayTime</name></member>
      <member refid="class_basis_1a80975218d67cc019d69fefb7a207d344" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>legendre_R</name></member>
      <member refid="class_cylinder_1ad85ba8c6f56f1a53daded0bf0f18b64c" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>lmax</name></member>
      <member refid="class_cylinder_1a1c3215879f78fcbe40673143c8e5f42c" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>lmaxfid</name></member>
      <member refid="class_cylinder_1a34b887a9b700e9bb529dc2990c97e6d0" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>logarithmic</name></member>
      <member refid="class_pot_accel_1a65fa890eea987e18d552825ab074939b" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>make_mutex</name></member>
      <member refid="class_cylinder_1aa04955a71bc38bd5073ac88c728ed33b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>mix</name></member>
      <member refid="class_pot_accel_1ad9ff6c9f431ad2f8ad2e5895c222ede8" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>mlevel</name></member>
      <member refid="class_cylinder_1a9234ee393feef01aad1ca212f09cd79d" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>mlim</name></member>
      <member refid="class_cylinder_1a12ec434b1c079bf422d74f09034177a2" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>mmax</name></member>
      <member refid="class_cylinder_1a88fe8538c7db750b7ade565a5833a551" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>Mouter</name></member>
      <member refid="class_cylinder_1a57315dc95a1b474e33109007f654c20e" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_add_debug</name></member>
      <member refid="class_cylinder_1ad8f35bcf5fa4a3b686c63b23a1b497b4" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_debug</name></member>
      <member refid="class_cylinder_1ad8f35bcf5fa4a3b686c63b23a1b497b4" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_debug</name></member>
      <member refid="class_cylinder_1a4ccd3920ba81aabc5051840b7c0d5875" prot="private" virt="virtual"><scope>Cylinder</scope><name>multistep_reset</name></member>
      <member refid="class_cylinder_1a4ccd3920ba81aabc5051840b7c0d5875" prot="private" virt="virtual"><scope>Cylinder</scope><name>multistep_reset</name></member>
      <member refid="class_cylinder_1afbf22ebc466872639f53e2dcd4847975" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_update</name></member>
      <member refid="class_cylinder_1afbf22ebc466872639f53e2dcd4847975" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_update</name></member>
      <member refid="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_update_begin</name></member>
      <member refid="class_cylinder_1a5c444052ebe63288e65ea8da6f3a2918" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_update_begin</name></member>
      <member refid="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_update_finish</name></member>
      <member refid="class_cylinder_1a77f0370f73afe1d8a759858128dc6df9" prot="public" virt="virtual"><scope>Cylinder</scope><name>multistep_update_finish</name></member>
      <member refid="class_pot_accel_1a73976f361ed7abf13001835bfcdee639" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>nbodies</name></member>
      <member refid="class_cylinder_1ab3be12b4f68220b0d219855681eb148b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncompcyl</name></member>
      <member refid="class_cylinder_1ab2db311e1dc6590d107c11eb90184b27" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncylnx</name></member>
      <member refid="class_cylinder_1a386f1055748f3c14aa1e75d4b43ac65a" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncylny</name></member>
      <member refid="class_cylinder_1a0645bcb6ca151f75a7328c48b7c7f561" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncylodd</name></member>
      <member refid="class_cylinder_1a17abe7455e146a16caf01004ce99b47b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncylorder</name></member>
      <member refid="class_cylinder_1a7b5419be05569c7a29bcf759e254b015" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncylr</name></member>
      <member refid="class_cylinder_1a894fedb582c1ea3afb9ab5342d398e8a" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ncylrecomp</name></member>
      <member refid="class_cylinder_1ae4cdc7ef48e7c3db7e2dd6193da043e9" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>Ninner</name></member>
      <member refid="class_cylinder_1a4c520789d2760f4aa84faeb9f1982a90" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>nmax</name></member>
      <member refid="class_cylinder_1a19766a8761b8e889cb47767d13d8310f" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>nmaxfid</name></member>
      <member refid="class_pot_accel_1a4f2099b1b705731b909e63c90ea59f04" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>NoCoefs</name></member>
      <member refid="class_cylinder_1a030852fd857b6c058aa2e7af07b8419b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>npca</name></member>
      <member refid="class_cylinder_1a6216961404726e8db70d0c8cfc21a7b7" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>npca0</name></member>
      <member refid="class_cylinder_1a4ef6a4e32e1d56fba2c0c05090996ae0" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>nvtk</name></member>
      <member refid="class_cylinder_1a9e99f36b08c657530c89e07423ad0cbe" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>occt</name></member>
      <member refid="class_cylinder_1ae05f092861f7abbd4addc7f158d34e52" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>occt_output</name></member>
      <member refid="class_cylinder_1ac8c9b5b3e62d685ed588d4cb1749796d" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>offgrid</name></member>
      <member refid="class_cylinder_1a3c5d15b8fad2908a261391dafafdc937" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>ortho</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fda7c49f38007dad33fb1e48fdebdd2f8c1" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>other</name></member>
      <member refid="class_cylinder_1a101160d0f44fbe28d1aa349338a6915f" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>P</name></member>
      <member refid="class_cylinder_1ab42b1b72eff2c9aca1fc2b4ba97ca968" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>P1</name></member>
      <member refid="class_cylinder_1a18dfd51d53a7b42743201ebea8791dd7" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pcadiag</name></member>
      <member refid="class_cylinder_1a5223e5b265f66daf43f40e9e9e7800c1" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pcaeof</name></member>
      <member refid="class_cylinder_1a7cde3e9c2a02333f1da31e2ea5a23815" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pcainit</name></member>
      <member refid="class_cylinder_1a998a906122544ef609d64315e29ac010" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pcavar</name></member>
      <member refid="class_cylinder_1afdc928a1a1e6aa7ed2f05543379d89d2" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pcavtk</name></member>
      <member refid="class_pot_accel_1a74b41dd5c2f102dd3184ac53b6172462" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>play_back</name></member>
      <member refid="class_pot_accel_1aea1c756cd9616a1daf73541780b45798" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>play_cnew</name></member>
      <member refid="class_cylinder_1a8221adf2f7752878029457315306b6d3" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>playback</name></member>
      <member refid="class_cylinder_1acd2caa76f815c6f2060678642e75efd0" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pnum</name></member>
      <member refid="class_cylinder_1a4fec25d8a1b146fcaa5fb44600615be7" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pos</name></member>
      <member refid="class_pot_accel_1a801fdbd01e551033e79f274e4a7c1d1e" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>PotAccel</name></member>
      <member refid="class_cylinder_1ae030480be4abf0ed4c4c9537916699f5" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>precond</name></member>
      <member refid="class_pot_accel_1a5e257d38dbf5c3d9630906a96abf6915" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>print_timings</name></member>
      <member refid="class_pot_accel_1a37a3c348c0febbf70ff94949071c3beb" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>print_timings</name></member>
      <member refid="class_cylinder_1ac4b0aa8cca2b099927173f54f5d15374" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>pyname</name></member>
      <member refid="class_cylinder_1a0378e0869280d9ce4f60bddd6efa64c3" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>rcylmax</name></member>
      <member refid="class_cylinder_1a5ea6efe65d6a8d3fcceb393bb2c10d1b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>rcylmin</name></member>
      <member refid="class_pot_accel_1a8aea0d1740bf7432e1193dda7121a8bb" prot="public" virt="virtual"><scope>Cylinder</scope><name>RegisterComponent</name></member>
      <member refid="class_cylinder_1a23395a8853a0f28ca825e21216970c3a" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>rem</name></member>
      <member refid="class_cylinder_1a5adfedecd063b3d959213e3ebbdcfd7f" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>resetT</name></member>
      <member refid="class_cylinder_1ae86c72dc343ff4e236cccf2e57d9f28b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>rnum</name></member>
      <member refid="class_cylinder_1abee587361c163c331bd1ddce15772554" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>sampT</name></member>
      <member refid="class_pot_accel_1added387424e4e4d23bac8500822e4324" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>scale</name></member>
      <member refid="class_cylinder_1a565762a9935614e789d776b6dad1560c" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>self_consistent</name></member>
      <member refid="class_pot_accel_1ac65dfca720c42ea4a773024d1eaf977f" prot="public" virt="virtual"><scope>Cylinder</scope><name>set_multistep_level</name></member>
      <member refid="class_cylinder_1a717a3d56d06af595e0ed1fe364b2525b" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>setCoefs</name></member>
      <member refid="class_cylinder_1a717a3d56d06af595e0ed1fe364b2525b" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>setCoefs</name></member>
      <member refid="class_pot_accel_1a6dc784a141afdec5f4daad63eba20b81" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>SetExternal</name></member>
      <member refid="class_pot_accel_1ad528efbd280a21543addaf7747e9089a" prot="public" virt="virtual"><scope>Cylinder</scope><name>setScale</name></member>
      <member refid="class_cylinder_1ac4604b06d6359a220b903dd5b5ef05b3" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>sin_coef_lock</name></member>
      <member refid="class_basis_1a0779c0b0f74361d7861bbc19a194b63c" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>sinecosine_R</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fda0a1acd8c0d6e745fb0ae3e33e458a9b8" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>slab</name></member>
      <member refid="class_cylinder_1ab0de68f61c5bdf589cfe8b865e67a495" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>snr</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fda996ce4577548b6da6b1330a78b1c6f6a" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>sphere</name></member>
      <member refid="class_cylinder_1a78b65f10dcc38c83c11ebab173f614c6" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>subsamp</name></member>
      <member refid="class_pot_accel_1aff158a74d7328a080ed619c1456836f5" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>t</name></member>
      <member refid="class_pot_accel_1ad55d9279ca0e8318bfe1a95d1c7566fda1792d3c00a41ee78957c83611fd368a2" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>table</name></member>
      <member refid="class_pot_accel_1a125d7343a34d292a3e4a48a5d984cac4" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>td</name></member>
      <member refid="class_pot_accel_1a86d0d012a44e2eb7c3e385d852a5fdde" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>thread_timing_beg</name></member>
      <member refid="class_pot_accel_1a76c805cd8d0d134d37929eeb48115b33" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>thread_timing_end</name></member>
      <member refid="class_pot_accel_1a4315e73a641c54eefc548b7d14cb06b6" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>timer_list</name></member>
      <member refid="class_pot_accel_1aabce5ff868883c6191b8b7f8f6281c04" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>TList</name></member>
      <member refid="class_cylinder_1a63db8edc6a36ea94b4fb59337cad9628" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>tnum</name></member>
      <member refid="class_cylinder_1abba13fc273f5810d1235db57cde60a67" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>try_cache</name></member>
      <member refid="class_pot_accel_1a0355cfe43cdde5237f7be234e94de64b" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>unmatched</name></member>
      <member refid="class_pot_accel_1acd32c6464b705469911df718114187b9" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>use</name></member>
      <member refid="class_pot_accel_1a59a4a86ea8d2b3a9a5d420ef7e712697" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>use_external</name></member>
      <member refid="class_pot_accel_1ae2e0dbf849707704a3d42a1fa91ce060" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>Used</name></member>
      <member refid="class_pot_accel_1a8fe5beef77e790f0d7bf6f455f5bf1d3" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>used</name></member>
      <member refid="class_cylinder_1a9997b96fd22bf7f5d9990cb5dbfdcfb9" prot="public" virt="non-virtual"><scope>Cylinder</scope><name>used_lock</name></member>
      <member refid="class_cylinder_1a9a3ad9c738c98c33c997fd74ca3872ee" prot="protected" virt="non-virtual"><scope>Cylinder</scope><name>valid_keys</name></member>
      <member refid="class_cylinder_1a262f89ac08cdc97a4ffc86cf4ae12f6b" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>vflag</name></member>
      <member refid="class_cylinder_1a2ac137b2f949e4d41ea3d5b61ed7581e" prot="private" virt="non-virtual"><scope>Cylinder</scope><name>zmax</name></member>
      <member refid="class_cylinder_1a62b974fc969958cc05fa7d72cb5a4395" prot="public" virt="virtual"><scope>Cylinder</scope><name>~Cylinder</name></member>
      <member refid="class_cylinder_1a62b974fc969958cc05fa7d72cb5a4395" prot="public" virt="virtual"><scope>Cylinder</scope><name>~Cylinder</name></member>
      <member refid="class_pot_accel_1adcc326688bb152249f81e88d6edfde62" prot="public" virt="virtual"><scope>Cylinder</scope><name>~PotAccel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
