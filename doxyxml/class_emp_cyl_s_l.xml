<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_emp_cyl_s_l" kind="class" language="C++" prot="public">
    <compoundname>EmpCylSL</compoundname>
    <derivedcompoundref refid="class_cyl_e_x_p" prot="public" virt="non-virtual">CylEXP</derivedcompoundref>
    <includes refid="_emp_cyl_s_l_8_h" local="no">EmpCylSL.H</includes>
    <innerclass refid="class_emp_cyl_s_l_1_1_axi_disk" prot="public">EmpCylSL::AxiDisk</innerclass>
    <innerclass refid="struct_emp_cyl_s_l_1_1_coef_matrix" prot="protected">EmpCylSL::CoefMatrix</innerclass>
    <innerclass refid="struct_emp_cyl_s_l_1_1_coef_vector" prot="protected">EmpCylSL::CoefVector</innerclass>
    <innerclass refid="struct_emp_cyl_s_l_1_1_mstep_array" prot="protected">EmpCylSL::MstepArray</innerclass>
    <innerclass refid="class_emp_cyl_s_l_1_1_p_c_abasis" prot="protected">EmpCylSL::PCAbasis</innerclass>
    <innerclass refid="class_emp_cyl_s_l_1_1_p_c_aelement" prot="protected">EmpCylSL::PCAelement</innerclass>
    <sectiondef kind="user-defined">
      <header>Utility functions</header>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1afe32ddfdaa2dfb84185985cccd96b198" prot="public" static="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>using EmpCylSL::TableArray =  std::vector&lt;Eigen::MatrixXd&gt;</definition>
        <argsstring></argsstring>
        <name>TableArray</name>
        <qualifiedname>EmpCylSL::TableArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="818" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a18bed20a9f4ae417170c7e3f76d88f48" prot="private" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793" kindref="member">TKType</ref></type>
        <definition>TKType EmpCylSL::tk_type</definition>
        <argsstring></argsstring>
        <name>tk_type</name>
        <qualifiedname>EmpCylSL::tk_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="1023" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="1023" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" compoundref="_emp_cyl_s_l_8_h" startline="772" endline="804">setHall</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a2452105272021c3c33064981587c1184" compoundref="_emp_cyl_s_l_8_h" startline="902" endline="913">setTK</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ad58896052cd458e7f8c6a69a84a0b061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::legendre_R</definition>
        <argsstring>(int lmax, double x, Eigen::MatrixXd &amp;p)</argsstring>
        <name>legendre_R</name>
        <qualifiedname>EmpCylSL::legendre_R</qualifiedname>
        <param>
          <type>int</type>
          <declname>lmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute Associated <ref refid="class_legendre" kindref="compound">Legendre</ref> Polynomials, return Matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="740" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a02a79620604c800c332acda6b041447f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dlegendre_R</definition>
        <argsstring>(int lmax, double x, Eigen::MatrixXd &amp;p, Eigen::MatrixXd &amp;dp)</argsstring>
        <name>dlegendre_R</name>
        <qualifiedname>EmpCylSL::dlegendre_R</qualifiedname>
        <param>
          <type>int</type>
          <declname>lmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>dp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute Associated <ref refid="class_legendre" kindref="compound">Legendre</ref> Polynomials and derivitives, return Matrix type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="743" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ad4393e20f35ceecb752b3fa6a014bcb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::sinecosine_R</definition>
        <argsstring>(int mmax, double phi, Eigen::VectorXd &amp;c, Eigen::VectorXd &amp;s)</argsstring>
        <name>sinecosine_R</name>
        <qualifiedname>EmpCylSL::sinecosine_R</qualifiedname>
        <param>
          <type>int</type>
          <declname>mmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Compute vectors of sines and cosines by recursion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="745" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a40fe0cc482bea73f3393f5162d391e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::xi_to_r</definition>
        <argsstring>(double)</argsstring>
        <name>xi_to_r</name>
        <qualifiedname>EmpCylSL::xi_to_r</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Convert from non-dimensional to dimensional radial coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="750" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a900f4ad76eb155da9a21e483393c30db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::r_to_xi</definition>
        <argsstring>(double)</argsstring>
        <name>r_to_xi</name>
        <qualifiedname>EmpCylSL::r_to_xi</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Convert from dimension to non-dimension radial coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="753" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a0e10a3d34155f376150a0ece8a85acbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::d_xi_to_r</definition>
        <argsstring>(double)</argsstring>
        <name>d_xi_to_r</name>
        <qualifiedname>EmpCylSL::d_xi_to_r</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Jacobian. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="756" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a17510668f28e08910262d470b7e1c36b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::get_ascale</definition>
        <argsstring>(void)</argsstring>
        <name>get_ascale</name>
        <qualifiedname>EmpCylSL::get_ascale</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current value of disk scale length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="759" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="759" bodyend="759"/>
        <references refid="class_emp_cyl_s_l_1a63fbc7a58c18306cf8ff7b9cd1f1acd7" compoundref="_emp_cyl_s_l_8_h" startline="75">ASCALE</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ad9ab639d87404f5410b8136fa75a2873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::get_hscale</definition>
        <argsstring>(void)</argsstring>
        <name>get_hscale</name>
        <qualifiedname>EmpCylSL::get_hscale</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current value of disk scale height. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="762" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="762" bodyend="762"/>
        <references refid="class_emp_cyl_s_l_1aafceeb0f77f53e1eb2fafc9ac8d1ddc9" compoundref="_emp_cyl_s_l_8_h" startline="76">HSCALE</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ad1a0ddf3cf580d8c4d688d1232e5d3ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::get_rtable</definition>
        <argsstring>(void)</argsstring>
        <name>get_rtable</name>
        <qualifiedname>EmpCylSL::get_rtable</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current table radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="765" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="765" bodyend="765"/>
        <references refid="class_emp_cyl_s_l_1a6627c10537857cd1da90c8935bba8beb" compoundref="_emp_cyl_s_l_8_h" startline="110">Rtable</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a9488ca326d3fa636bd807f5caf55d2b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setEven</definition>
        <argsstring>(bool even=true)</argsstring>
        <name>setEven</name>
        <qualifiedname>EmpCylSL::setEven</qualifiedname>
        <param>
          <type>bool</type>
          <declname>even</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set even modes only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="768" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="768" bodyend="768"/>
        <references refid="class_emp_cyl_s_l_1a0becb34528efb75dd76d60b4a02084d8" compoundref="_emp_cyl_s_l_8_h" startline="332">EVEN_M</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setHall</definition>
        <argsstring>(std::string file, unsigned tot)</argsstring>
        <name>setHall</name>
        <qualifiedname>EmpCylSL::setHall</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>tot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set file name for EOF analysis and sample size for subsample computation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="772" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="772" bodyend="804"/>
        <references refid="model3d_8_h_1ab6fca3418c4b6179d83a8991a8b2f63cab4e367fba14b5eae38519a2823aca793" compoundref="model3d_8_h" startline="4">file</references>
        <references refid="class_emp_cyl_s_l_1a32cdbad0071825e02d2f697ca4aedf4b" compoundref="_emp_cyl_s_l_8_h" startline="63">hallfile</references>
        <references refid="class_emp_cyl_s_l_1a1090e03956ae9472f3e706155b236a91">init_pca</references>
        <references refid="localmpi_8_h_1a20705b4372a9940d34a164bae541be1f" compoundref="localmpi_8_h" startline="17">myid</references>
        <references refid="class_emp_cyl_s_l_1a1966b7be886e21c19de9945e84cf1996" compoundref="_emp_cyl_s_l_8_h" startline="62">nbodstot</references>
        <references refid="class_emp_cyl_s_l_1ad1c941f70ba409b1267a5c602192a06f" compoundref="_emp_cyl_s_l_8_h" startline="397">PCAEOF</references>
        <references refid="class_emp_cyl_s_l_1a7421fd16b5bc2b716abdadeb2ee4fbda" compoundref="_emp_cyl_s_l_8_h" startline="391">PCAVAR</references>
        <references refid="class_emp_cyl_s_l_1a18bed20a9f4ae417170c7e3f76d88f48" compoundref="_emp_cyl_s_l_8_h" startline="1023">tk_type</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a0671042c6008017bd136991f272894b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::getPotSC</definition>
        <argsstring>(int m, int j, double R, double z, double &amp;pC, double &amp;pS)</argsstring>
        <name>getPotSC</name>
        <qualifiedname>EmpCylSL::getPotSC</qualifiedname>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>double</type>
          <declname>R</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pC</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pS</declname>
        </param>
        <briefdescription>
<para>Get potential grid interpolated entries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="813" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aae847e6f397b305dcd301ad7966a7923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::getDensSC</definition>
        <argsstring>(int m, int j, double R, double z, double &amp;dC, double &amp;dS)</argsstring>
        <name>getDensSC</name>
        <qualifiedname>EmpCylSL::getDensSC</qualifiedname>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>double</type>
          <declname>R</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dC</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dS</declname>
        </param>
        <briefdescription>
<para>Get density grid interpolated entries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="816" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_emp_cyl_s_l_1afe32ddfdaa2dfb84185985cccd96b198" kindref="member">TableArray</ref></type>
        <definition>TableArray EmpCylSL::getDensC</definition>
        <argsstring>()</argsstring>
        <name>getDensC</name>
        <qualifiedname>EmpCylSL::getDensC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return density and potential matrices Indexed (M, n) pair as id = M*NORDER + n </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="822" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="822" bodyend="835"/>
        <references refid="class_emp_cyl_s_l_1a7e56db72abcf0d0eec07f15eb2376032" compoundref="_emp_cyl_s_l_8_h" startline="113">densC</references>
        <references refid="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" compoundref="_emp_cyl_s_l_8_h" startline="67">M</references>
        <references refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" compoundref="_emp_cyl_s_l_8_h" startline="56">MMAX</references>
        <references refid="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" compoundref="_emp_cyl_s_l_8_h" startline="59">NORDER</references>
        <references refid="class_emp_cyl_s_l_1a3c5efbaa5c0823fa2df420dbb4ad701c" compoundref="_emp_cyl_s_l_8_h" startline="423">NUMX</references>
        <references refid="class_emp_cyl_s_l_1a3ca5a4b84952e41185bc851f0b0a4310" compoundref="_emp_cyl_s_l_8_h" startline="426">NUMY</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_emp_cyl_s_l_1afe32ddfdaa2dfb84185985cccd96b198" kindref="member">TableArray</ref></type>
        <definition>TableArray EmpCylSL::getDensS</definition>
        <argsstring>()</argsstring>
        <name>getDensS</name>
        <qualifiedname>EmpCylSL::getDensS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="837" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="837" bodyend="850"/>
        <references refid="class_emp_cyl_s_l_1ae05a132072a42c08fdfbac5cdd4117b0" compoundref="_emp_cyl_s_l_8_h" startline="118">densS</references>
        <references refid="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" compoundref="_emp_cyl_s_l_8_h" startline="67">M</references>
        <references refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" compoundref="_emp_cyl_s_l_8_h" startline="56">MMAX</references>
        <references refid="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" compoundref="_emp_cyl_s_l_8_h" startline="59">NORDER</references>
        <references refid="class_emp_cyl_s_l_1a3c5efbaa5c0823fa2df420dbb4ad701c" compoundref="_emp_cyl_s_l_8_h" startline="423">NUMX</references>
        <references refid="class_emp_cyl_s_l_1a3ca5a4b84952e41185bc851f0b0a4310" compoundref="_emp_cyl_s_l_8_h" startline="426">NUMY</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_emp_cyl_s_l_1afe32ddfdaa2dfb84185985cccd96b198" kindref="member">TableArray</ref></type>
        <definition>TableArray EmpCylSL::getPotlC</definition>
        <argsstring>()</argsstring>
        <name>getPotlC</name>
        <qualifiedname>EmpCylSL::getPotlC</qualifiedname>
        <briefdescription>
<para>Return density and potential matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="853" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="853" bodyend="866"/>
        <references refid="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" compoundref="_emp_cyl_s_l_8_h" startline="67">M</references>
        <references refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" compoundref="_emp_cyl_s_l_8_h" startline="56">MMAX</references>
        <references refid="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" compoundref="_emp_cyl_s_l_8_h" startline="59">NORDER</references>
        <references refid="class_emp_cyl_s_l_1a3c5efbaa5c0823fa2df420dbb4ad701c" compoundref="_emp_cyl_s_l_8_h" startline="423">NUMX</references>
        <references refid="class_emp_cyl_s_l_1a3ca5a4b84952e41185bc851f0b0a4310" compoundref="_emp_cyl_s_l_8_h" startline="426">NUMY</references>
        <references refid="class_emp_cyl_s_l_1abf856ef4ab862213fcc5b4accb5f135a" compoundref="_emp_cyl_s_l_8_h" startline="112">potC</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_emp_cyl_s_l_1afe32ddfdaa2dfb84185985cccd96b198" kindref="member">TableArray</ref></type>
        <definition>TableArray EmpCylSL::getPotlS</definition>
        <argsstring>()</argsstring>
        <name>getPotlS</name>
        <qualifiedname>EmpCylSL::getPotlS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="868" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="868" bodyend="881"/>
        <references refid="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" compoundref="_emp_cyl_s_l_8_h" startline="67">M</references>
        <references refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" compoundref="_emp_cyl_s_l_8_h" startline="56">MMAX</references>
        <references refid="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" compoundref="_emp_cyl_s_l_8_h" startline="59">NORDER</references>
        <references refid="class_emp_cyl_s_l_1a3c5efbaa5c0823fa2df420dbb4ad701c" compoundref="_emp_cyl_s_l_8_h" startline="423">NUMX</references>
        <references refid="class_emp_cyl_s_l_1a3ca5a4b84952e41185bc851f0b0a4310" compoundref="_emp_cyl_s_l_8_h" startline="426">NUMY</references>
        <references refid="class_emp_cyl_s_l_1a80294caadb34d5e85752bed0f85b2b42" compoundref="_emp_cyl_s_l_8_h" startline="117">potS</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a3506d9e2af85bad3fbaa6d4322445139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::getPotParticle</definition>
        <argsstring>(double x, double y, double z, ContribArray &amp;vc, ContribArray &amp;vs)</argsstring>
        <name>getPotParticle</name>
        <qualifiedname>EmpCylSL::getPotParticle</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="class_emp_cyl_s_l_1a72d8726715739ecffdfe29e5c8569cbc" kindref="member">ContribArray</ref> &amp;</type>
          <declname>vc</declname>
        </param>
        <param>
          <type><ref refid="class_emp_cyl_s_l_1a72d8726715739ecffdfe29e5c8569cbc" kindref="member">ContribArray</ref> &amp;</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="884" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a1f6cc889a40ff0168ee43b4d139b7e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::get_trimmed</definition>
        <argsstring>(double snr, std::vector&lt; Eigen::VectorXd &gt; &amp;ac_cos, std::vector&lt; Eigen::VectorXd &gt; &amp;ac_sin, std::vector&lt; Eigen::VectorXd &gt; *rt_cos=0, std::vector&lt; Eigen::VectorXd &gt; *rt_sin=0, std::vector&lt; Eigen::VectorXd &gt; *sn_rat=0)</argsstring>
        <name>get_trimmed</name>
        <qualifiedname>EmpCylSL::get_trimmed</qualifiedname>
        <param>
          <type>double</type>
          <declname>snr</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>ac_cos</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>ac_sin</declname>
        </param>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; *</type>
          <declname>rt_cos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; *</type>
          <declname>rt_sin</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; *</type>
          <declname>sn_rat</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the coefficients trimmed by a SNR value using the defined algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="888" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a27cd8d9869bfdbb710e28925664f2289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_trimmed</definition>
        <argsstring>(double snr, double rem)</argsstring>
        <name>set_trimmed</name>
        <qualifiedname>EmpCylSL::set_trimmed</qualifiedname>
        <param>
          <type>double</type>
          <declname>snr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rem</declname>
        </param>
        <briefdescription>
<para>Set the coefficients trimmed by a SNR value using the defined algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="895" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a9a192aad1ace6a1bc46cb96e7ae13ec2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setTotal</definition>
        <argsstring>(unsigned tot)</argsstring>
        <name>setTotal</name>
        <qualifiedname>EmpCylSL::setTotal</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>tot</declname>
        </param>
        <briefdescription>
<para>Set number of bodies for subsample computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="898" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="898" bodyend="900"/>
        <references refid="class_emp_cyl_s_l_1a1966b7be886e21c19de9945e84cf1996" compoundref="_emp_cyl_s_l_8_h" startline="62">nbodstot</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a2452105272021c3c33064981587c1184" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setTK</definition>
        <argsstring>(const std::string &amp;tk)</argsstring>
        <name>setTK</name>
        <qualifiedname>EmpCylSL::setTK</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>tk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="902" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="902" bodyend="913"/>
        <references refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793afab918d81116908252f64b5c7e2eaa99" compoundref="_emp_cyl_s_l_8_h" startline="348">Hall</references>
        <references refid="localmpi_8_h_1a20705b4372a9940d34a164bae541be1f" compoundref="localmpi_8_h" startline="17">myid</references>
        <references refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793a955b9c65bb82613a6ed0a36482bfbded" compoundref="_emp_cyl_s_l_8_h" startline="350">None</references>
        <references refid="class_emp_cyl_s_l_1a18bed20a9f4ae417170c7e3f76d88f48" compoundref="_emp_cyl_s_l_8_h" startline="1023">tk_type</references>
        <references refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793aaef8f7277ef603757d44900f96e17d67" compoundref="_emp_cyl_s_l_8_h" startline="349">Truncate</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ae0476e0a062bbdafcb8a953545e12ac1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; EmpCylSL::sanity</definition>
        <argsstring>()</argsstring>
        <name>sanity</name>
        <qualifiedname>EmpCylSL::sanity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="915" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="915" bodyend="919"/>
        <references refid="class_emp_cyl_s_l_1aa73f0cb40abc6958380212b49e620302" compoundref="_emp_cyl_s_l_8_h" startline="157">accum_cos</references>
        <references refid="class_emp_cyl_s_l_1a902557b515ca710ca7e6d685135f1201" compoundref="_emp_cyl_s_l_8_h" startline="73">m</references>
        <references refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" compoundref="_emp_cyl_s_l_8_h" startline="56">MMAX</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a588dfcebda9ba2b17021345f5966be63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::ortho_check</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>ortho_check</name>
        <qualifiedname>EmpCylSL::ortho_check</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Check orthogonality for basis (debugging) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="922" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af728339f3ca3414a24893217f2f350af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt; Eigen::MatrixXd &gt; EmpCylSL::orthoCheck</definition>
        <argsstring>()</argsstring>
        <name>orthoCheck</name>
        <qualifiedname>EmpCylSL::orthoCheck</qualifiedname>
        <briefdescription>
<para>Check orthogonality for basis (pyEXP style) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="925" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a862b82f17985a1002130ea7d735f3210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>static std::map&lt; std::string, std::string &gt; EmpCylSL::cacheInfo</definition>
        <argsstring>(const std::string &amp;cachefile, bool verbose=true)</argsstring>
        <name>cacheInfo</name>
        <qualifiedname>EmpCylSL::cacheInfo</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>cachefile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read and print the cache and return the header parameters as a map/dictionary </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="809" column="3"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a686c18b7deb23a96b0608d96a7d13164" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_emp_cyl_s_l_1_1_axi_disk" kindref="compound">AxiDisk</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;AxiDisk&gt; EmpCylSL::AxiDiskPtr</definition>
        <argsstring></argsstring>
        <name>AxiDiskPtr</name>
        <qualifiedname>EmpCylSL::AxiDiskPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="388" column="27" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a72d8726715739ecffdfe29e5c8569cbc" prot="public" static="no">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>using EmpCylSL::ContribArray =  std::vector&lt;Eigen::VectorXd&gt;</definition>
        <argsstring></argsstring>
        <name>ContribArray</name>
        <qualifiedname>EmpCylSL::ContribArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="48" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07f" prot="public" static="no" strong="no">
        <type></type>
        <name>EmpModel</name>
        <qualifiedname>EmpCylSL::EmpModel</qualifiedname>
        <enumvalue id="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa3371db82e8230c5a156ba0bb2b31bef5" prot="public">
          <name>Exponential</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa371f52b51dc8b5b0aeb0d215b04000bd" prot="public">
          <name>Gaussian</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa9bd88c8027e6d12627cae69439530779" prot="public">
          <name>Plummer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa3cc496a7b14b9c9ede3f215514ab2302" prot="public">
          <name>Power</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa67567924e95e58ef6bb9ecd65d96a077" prot="public">
          <name>Deproject</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of density model to use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="354" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="354" bodyend="360"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a61332ab2df1dc74abdf9d54223809929" prot="public" static="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>using EmpCylSL::MatrixM =  std::vector&lt;Eigen::MatrixXd&gt;</definition>
        <argsstring></argsstring>
        <name>MatrixM</name>
        <qualifiedname>EmpCylSL::MatrixM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="47" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1ae28c1cae7b3574cb457c8e1e00a094af" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_s_l_grid_sph" kindref="compound">SLGridSph</ref> &gt;</type>
        <definition>using EmpCylSL::SLGridSphPtr =  std::shared_ptr&lt;SLGridSph&gt;</definition>
        <argsstring></argsstring>
        <name>SLGridSphPtr</name>
        <qualifiedname>EmpCylSL::SLGridSphPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="45" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a5f02b326041b8aa3527a4a22b0505f73" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_spherical_model_table" kindref="compound">SphericalModelTable</ref> &gt;</type>
        <definition>using EmpCylSL::SphModTblPtr =  std::shared_ptr&lt;SphericalModelTable&gt;</definition>
        <argsstring></argsstring>
        <name>SphModTblPtr</name>
        <qualifiedname>EmpCylSL::SphModTblPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="44" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793" prot="public" static="no" strong="no">
        <type></type>
        <name>TKType</name>
        <qualifiedname>EmpCylSL::TKType</qualifiedname>
        <enumvalue id="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793afab918d81116908252f64b5c7e2eaa99" prot="public">
          <name>Hall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tapered signal-to-noise as defined by Hall <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793aaef8f7277ef603757d44900f96e17d67" prot="public">
          <name>Truncate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="class_truncated" kindref="compound">Truncated</ref> signal-to-noise <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793a955b9c65bb82613a6ed0a36482bfbded" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compute the S/N but do not modify coefficients <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enum listing the possible selection algorithms for coefficient selection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="347" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="347" bodyend="351"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a54a8c779ca2381397fa7c8007094e411" prot="public" static="no">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>using EmpCylSL::VectorM =  std::vector&lt;Eigen::VectorXd&gt;</definition>
        <argsstring></argsstring>
        <name>VectorM</name>
        <qualifiedname>EmpCylSL::VectorM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="46" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a51068281e8060eadcd0251bbcb73150c" prot="protected" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_emp_cyl_s_l_1_1_p_c_abasis" kindref="compound">PCAbasis</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;PCAbasis&gt; EmpCylSL::PCAbasisPtr</definition>
        <argsstring></argsstring>
        <name>PCAbasisPtr</name>
        <qualifiedname>EmpCylSL::PCAbasisPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="317" column="27" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a97c584dfe52e938ff4511176367bbaee" prot="protected" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_emp_cyl_s_l_1_1_p_c_aelement" kindref="compound">PCAelement</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;PCAelement&gt; EmpCylSL::PCAelemPtr</definition>
        <argsstring></argsstring>
        <name>PCAelemPtr</name>
        <qualifiedname>EmpCylSL::PCAelemPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="285" column="27" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" prot="protected" static="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; std::vector&lt; double &gt; &gt; &gt; &gt;</type>
        <definition>using EmpCylSL::VarMat =  std::vector&lt; std::vector&lt; std::vector&lt; std::vector&lt;double&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VarMat</name>
        <qualifiedname>EmpCylSL::VarMat</qualifiedname>
        <briefdescription>
<para>EOF variance computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="95" column="3" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1aef3ae77896a94fd792bfda35b6b4bfe5" prot="protected" static="no">
        <type>std::vector&lt; std::vector&lt; Eigen::VectorXd &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::vector&lt;Eigen::VectorXd&gt; &gt; EmpCylSL::VectorD2</definition>
        <argsstring></argsstring>
        <name>VectorD2</name>
        <qualifiedname>EmpCylSL::VectorD2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="129" column="23" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_emp_cyl_s_l_1ab920a867dad05729d3b2aa3e6f13cb78" prot="protected" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_emp_cyl_s_l_1aef3ae77896a94fd792bfda35b6b4bfe5" kindref="member">VectorD2</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;VectorD2&gt; EmpCylSL::VectorD2ptr</definition>
        <argsstring></argsstring>
        <name>VectorD2ptr</name>
        <qualifiedname>EmpCylSL::VectorD2ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="130" column="27" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="130" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa73f0cb40abc6958380212b49e620302" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; EmpCylSL::accum_cos</definition>
        <argsstring></argsstring>
        <name>accum_cos</name>
        <qualifiedname>EmpCylSL::accum_cos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="157" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="157" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1ae0476e0a062bbdafcb8a953545e12ac1" compoundref="_emp_cyl_s_l_8_h" startline="915" endline="919">sanity</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7a9a5f30a82f1540107d6e5c0dcb3ccd" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; EmpCylSL::accum_sin</definition>
        <argsstring></argsstring>
        <name>accum_sin</name>
        <qualifiedname>EmpCylSL::accum_sin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="158" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a63fbc7a58c18306cf8ff7b9cd1f1acd7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::ASCALE</definition>
        <argsstring></argsstring>
        <name>ASCALE</name>
        <qualifiedname>EmpCylSL::ASCALE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="75" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="75" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a17510668f28e08910262d470b7e1c36b" compoundref="_emp_cyl_s_l_8_h" startline="759" endline="759">get_ascale</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ab771f6442cb98992024f528d9711004e" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EmpCylSL::cachefile</definition>
        <argsstring></argsstring>
        <name>cachefile</name>
        <qualifiedname>EmpCylSL::cachefile</qualifiedname>
        <briefdescription>
<para>The cache file name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="238" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa6b0d44cd165d3e014ba1f11f00167c9" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="struct_cyl_coef_header" kindref="compound">CylCoefHeader</ref></type>
        <definition>struct CylCoefHeader EmpCylSL::coefheadercyl</definition>
        <argsstring></argsstring>
        <name>coefheadercyl</name>
        <qualifiedname>EmpCylSL::coefheadercyl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="52" column="22" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1af20a77b1f4fd2c8e813d98711460e695" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; short &gt;</type>
        <definition>std::vector&lt;short&gt; EmpCylSL::coefs_made</definition>
        <argsstring></argsstring>
        <name>coefs_made</name>
        <qualifiedname>EmpCylSL::coefs_made</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="213" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="213" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a010b121e9d91a34a9698e670b6bbb7bc" compoundref="_emp_cyl_s_l_8_h" startline="621" endline="626">coefs_made_all</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ab415413271f771c89d825134bb946ee3" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_emp_cyl_s_l_1_1_mstep_array" kindref="compound">MstepArray</ref></type>
        <definition>MstepArray EmpCylSL::cosL</definition>
        <argsstring></argsstring>
        <name>cosL</name>
        <qualifiedname>EmpCylSL::cosL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="152" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ab17784aafefb2d23b269b10b0aebba76" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; EmpCylSL::cosm</definition>
        <argsstring></argsstring>
        <name>cosm</name>
        <qualifiedname>EmpCylSL::cosm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="105" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa21c6a9576dc5d76cba066a238b94409" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_emp_cyl_s_l_1_1_mstep_array" kindref="compound">MstepArray</ref></type>
        <definition>MstepArray EmpCylSL::cosN</definition>
        <argsstring></argsstring>
        <name>cosN</name>
        <qualifiedname>EmpCylSL::cosN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="152" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a9c0aa23a0d1b44c9c421d87b1b64a0b4" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_emp_cyl_s_l_1_1_coef_matrix" kindref="compound">CoefMatrix</ref></type>
        <definition>CoefMatrix EmpCylSL::covM</definition>
        <argsstring></argsstring>
        <name>covM</name>
        <qualifiedname>EmpCylSL::covM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="194" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7b6c8bcf8ee3a9ef0c055fc98a139fd6" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_emp_cyl_s_l_1_1_coef_vector" kindref="compound">CoefVector</ref></type>
        <definition>CoefVector EmpCylSL::covV</definition>
        <argsstring></argsstring>
        <name>covV</name>
        <qualifiedname>EmpCylSL::covV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="193" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac5b718c98b51ee729a87c4e4d3add432" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::cylmass</definition>
        <argsstring></argsstring>
        <name>cylmass</name>
        <qualifiedname>EmpCylSL::cylmass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="70" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="70" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a4781146b6d532a885eac87681b5ba419" compoundref="_emp_cyl_s_l_8_h" startline="694" endline="697">set_mass</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a9ced854d386d7b1306e498ca4eb54827" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::cylmass1</definition>
        <argsstring></argsstring>
        <name>cylmass1</name>
        <qualifiedname>EmpCylSL::cylmass1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="68" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a65e2efdbf4893d31dfc6e466739133c7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::cylmass_made</definition>
        <argsstring></argsstring>
        <name>cylmass_made</name>
        <qualifiedname>EmpCylSL::cylmass_made</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="69" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="69" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a4781146b6d532a885eac87681b5ba419" compoundref="_emp_cyl_s_l_8_h" startline="694" endline="697">set_mass</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a1224b24b83979fb27ddfc1bd4aecc29e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>EmpCylSL::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="73" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a0372fb0957caf5a86e74d4f594bff96f" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned EmpCylSL::defSampT</definition>
        <argsstring></argsstring>
        <name>defSampT</name>
        <qualifiedname>EmpCylSL::defSampT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="200" column="18" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="200" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1af49dd0104d532aabb4f6a3524dabdb40" compoundref="_emp_cyl_s_l_8_h" startline="588" endline="588">setSampT</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a6123da82bfd1ca939d5392260118200a" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::dend</definition>
        <argsstring></argsstring>
        <name>dend</name>
        <qualifiedname>EmpCylSL::dend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="104" column="29" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7e56db72abcf0d0eec07f15eb2376032" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::densC</definition>
        <argsstring></argsstring>
        <name>densC</name>
        <qualifiedname>EmpCylSL::densC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="113" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="113" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" compoundref="_emp_cyl_s_l_8_h" startline="822" endline="835">getDensC</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a8a6c84c7601d6a29836df1456dcf59c6" prot="protected" static="no" mutable="no">
        <type><ref refid="class_linear1d" kindref="compound">Linear1d</ref></type>
        <definition>Linear1d EmpCylSL::densRg</definition>
        <argsstring></argsstring>
        <name>densRg</name>
        <qualifiedname>EmpCylSL::densRg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="247" column="12" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae05a132072a42c08fdfbac5cdd4117b0" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::densS</definition>
        <argsstring></argsstring>
        <name>densS</name>
        <qualifiedname>EmpCylSL::densS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="118" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="118" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" compoundref="_emp_cyl_s_l_8_h" startline="837" endline="850">getDensS</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae0b0f702edf40c1ed5bc409e7c777bde" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::dfac</definition>
        <argsstring></argsstring>
        <name>dfac</name>
        <qualifiedname>EmpCylSL::dfac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="77" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1acaa96903f06d4b447c75602ae1417354" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::dlegs</definition>
        <argsstring></argsstring>
        <name>dlegs</name>
        <qualifiedname>EmpCylSL::dlegs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="106" column="20" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1af7eb74bd37528e0244aba778dc2d40c2" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::dpot</definition>
        <argsstring></argsstring>
        <name>dpot</name>
        <qualifiedname>EmpCylSL::dpot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="104" column="24" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a76b66e4f3961b92a33be7a3a1d8716a6" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::dX</definition>
        <argsstring></argsstring>
        <name>dX</name>
        <qualifiedname>EmpCylSL::dX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="66" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac063fba4503a8805591e93a6a753e5e5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::dY</definition>
        <argsstring></argsstring>
        <name>dY</name>
        <qualifiedname>EmpCylSL::dY</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="66" column="13" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a75221e0fd5253d5bb5ad4c1565a76849" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::ef</definition>
        <argsstring></argsstring>
        <name>ef</name>
        <qualifiedname>EmpCylSL::ef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="103" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a007a5ef3ae95a25e61a17b62c0fb7333" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::efE</definition>
        <argsstring></argsstring>
        <name>efE</name>
        <qualifiedname>EmpCylSL::efE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="103" column="22" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1adee991b5fc63a5052744c23fadca4904" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::efO</definition>
        <argsstring></argsstring>
        <name>efO</name>
        <qualifiedname>EmpCylSL::efO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="103" column="26" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a69c22647b58e9ec9f2cbea6abc59ca34" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::eof_made</definition>
        <argsstring></argsstring>
        <name>eof_made</name>
        <qualifiedname>EmpCylSL::eof_made</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="214" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a88f23e904a85afa0c441954a20bb02dd" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd EmpCylSL::ev</definition>
        <argsstring></argsstring>
        <name>ev</name>
        <qualifiedname>EmpCylSL::ev</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="102" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1afce0e9b9115cff91fec2a3bbdb5f2332" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd EmpCylSL::evE</definition>
        <argsstring></argsstring>
        <name>evE</name>
        <qualifiedname>EmpCylSL::evE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="102" column="22" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a0becb34528efb75dd76d60b4a02084d8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::EVEN_M</definition>
        <argsstring></argsstring>
        <name>EVEN_M</name>
        <qualifiedname>EmpCylSL::EVEN_M</qualifiedname>
        <briefdescription>
<para>Suppress odd modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="332" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="332" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a9488ca326d3fa636bd807f5caf55d2b5" compoundref="_emp_cyl_s_l_8_h" startline="768" endline="768">setEven</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a2f44992edff81154f1026271d9b5681e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::EvenOdd</definition>
        <argsstring></argsstring>
        <name>EvenOdd</name>
        <qualifiedname>EmpCylSL::EvenOdd</qualifiedname>
        <briefdescription>
<para>Use EvenOdd partition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="335" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae2164b7a15dac73e29cb86cd6de4e0fb" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd EmpCylSL::evO</definition>
        <argsstring></argsstring>
        <name>evO</name>
        <qualifiedname>EmpCylSL::evO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="102" column="26" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a1c404d27ff51dd5e3fe15942c1117bf3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::facC</definition>
        <argsstring></argsstring>
        <name>facC</name>
        <qualifiedname>EmpCylSL::facC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="79" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ad6a54ba5d4b62566788cfbbaf98beba3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::facS</definition>
        <argsstring></argsstring>
        <name>facS</name>
        <qualifiedname>EmpCylSL::facS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="79" column="20" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a8fc65e6b7aeb012a488b215c8cecb7e5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::ffac</definition>
        <argsstring></argsstring>
        <name>ffac</name>
        <qualifiedname>EmpCylSL::ffac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="77" column="20" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a32cdbad0071825e02d2f697ca4aedf4b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EmpCylSL::hallfile</definition>
        <argsstring></argsstring>
        <name>hallfile</name>
        <qualifiedname>EmpCylSL::hallfile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="63" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="63" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" compoundref="_emp_cyl_s_l_8_h" startline="772" endline="804">setHall</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a2e698863ae6024282839ea56e36c49f9" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned &gt;</type>
        <definition>std::vector&lt;unsigned&gt; EmpCylSL::howmany</definition>
        <argsstring></argsstring>
        <name>howmany</name>
        <qualifiedname>EmpCylSL::howmany</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="155" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1af4350beca43d1bf17c562b12a6adf88c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; unsigned &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;unsigned&gt; &gt; EmpCylSL::howmany1</definition>
        <argsstring></argsstring>
        <name>howmany1</name>
        <qualifiedname>EmpCylSL::howmany1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="154" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aafceeb0f77f53e1eb2fafc9ac8d1ddc9" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::HSCALE</definition>
        <argsstring></argsstring>
        <name>HSCALE</name>
        <qualifiedname>EmpCylSL::HSCALE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="76" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="76" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1ad9ab639d87404f5410b8136fa75a2873" compoundref="_emp_cyl_s_l_8_h" startline="762" endline="762">get_hscale</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ab1a540fc424075fe891650f694695da9" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;int&gt; &gt; EmpCylSL::lE</definition>
        <argsstring></argsstring>
        <name>lE</name>
        <qualifiedname>EmpCylSL::lE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="101" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1add032624c6deb17fcfadc48ff7168e41" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::legs</definition>
        <argsstring></argsstring>
        <name>legs</name>
        <qualifiedname>EmpCylSL::legs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="106" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a237f48b16768df1c2963b34a4825bc61" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::LMAX</definition>
        <argsstring></argsstring>
        <name>LMAX</name>
        <qualifiedname>EmpCylSL::LMAX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="55" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac841216851a44884a1947106c99a409b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;int&gt; &gt; EmpCylSL::lO</definition>
        <argsstring></argsstring>
        <name>lO</name>
        <qualifiedname>EmpCylSL::lO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="101" column="18" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <qualifiedname>EmpCylSL::M</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="67" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="67" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a010b121e9d91a34a9698e670b6bbb7bc" compoundref="_emp_cyl_s_l_8_h" startline="621" endline="626">coefs_made_all</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" compoundref="_emp_cyl_s_l_8_h" startline="822" endline="835">getDensC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" compoundref="_emp_cyl_s_l_8_h" startline="837" endline="850">getDensS</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" compoundref="_emp_cyl_s_l_8_h" startline="853" endline="866">getPotlC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" compoundref="_emp_cyl_s_l_8_h" startline="868" endline="881">getPotlS</referencedby>
        <referencedby refid="struct_emp_cyl_s_l_1_1_mstep_array_1a537bfa96caf1c4c33cdd0dd27ccd47dc" compoundref="_emp_cyl_s_l_8_h" startline="149" endline="149">EmpCylSL::MstepArray::operator()</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1_1_p_c_abasis_1ae9fb4a89a2cacf4563c3c7227637807f" compoundref="_emp_cyl_s_l_8_h" startline="299" endline="305">EmpCylSL::PCAbasis::PCAbasis</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a902557b515ca710ca7e6d685135f1201" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::m</definition>
        <argsstring></argsstring>
        <name>m</name>
        <qualifiedname>EmpCylSL::m</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="73" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="73" bodyend="-1"/>
        <referencedby refid="struct_emp_cyl_s_l_1_1_coef_vector_1a8663d9edb1564b67259f85cdfb6c2153" compoundref="_emp_cyl_s_l_8_h" startline="179" endline="179">EmpCylSL::CoefVector::operator()</referencedby>
        <referencedby refid="struct_emp_cyl_s_l_1_1_coef_matrix_1a6bb03e4fe7c2889a96877ad456616f51" compoundref="_emp_cyl_s_l_8_h" startline="184" endline="184">EmpCylSL::CoefMatrix::operator()</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1_1_p_c_abasis_1ae9fb4a89a2cacf4563c3c7227637807f" compoundref="_emp_cyl_s_l_8_h" startline="299" endline="305">EmpCylSL::PCAbasis::PCAbasis</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1ae0476e0a062bbdafcb8a953545e12ac1" compoundref="_emp_cyl_s_l_8_h" startline="915" endline="919">sanity</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ad4b19dd1a4221dd2cb5625aa3d2e9081" prot="protected" static="no" mutable="no">
        <type><ref refid="class_linear1d" kindref="compound">Linear1d</ref></type>
        <definition>Linear1d EmpCylSL::massRg</definition>
        <argsstring></argsstring>
        <name>massRg</name>
        <qualifiedname>EmpCylSL::massRg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="247" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae4013c1b10e1ee68436d77b2576d23f3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::massT</definition>
        <argsstring></argsstring>
        <name>massT</name>
        <qualifiedname>EmpCylSL::massT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="199" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a8e7c4e2797ecbb1df34246bd489ce330" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;double&gt; &gt; EmpCylSL::massT1</definition>
        <argsstring></argsstring>
        <name>massT1</name>
        <qualifiedname>EmpCylSL::massT1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="197" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a62306d9b0778b965f9934adccdcd4bb7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::maxSNR</definition>
        <argsstring></argsstring>
        <name>maxSNR</name>
        <qualifiedname>EmpCylSL::maxSNR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="71" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="71" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1aa99910aeac9bd0bcc43b35092a18a9f7" compoundref="_emp_cyl_s_l_8_h" startline="618" endline="618">getMaxSNR</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae664cf3f67ea55849aabfc0bc24b454c" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::minSNR</definition>
        <argsstring></argsstring>
        <name>minSNR</name>
        <qualifiedname>EmpCylSL::minSNR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="71" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="71" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1aaa2e4007e2a54759b910932321cdcc27" compoundref="_emp_cyl_s_l_8_h" startline="615" endline="615">getMinSNR</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a450128216652014ea18eb6c325f04945" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::MLIM</definition>
        <argsstring></argsstring>
        <name>MLIM</name>
        <qualifiedname>EmpCylSL::MLIM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="57" column="12" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="57" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a7da7158d060f7d325bd5146d6f964cc0" compoundref="_emp_cyl_s_l_8_h" startline="546" endline="546">get_mlim</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a55b3fe32f3c3eea485767941d0110107" compoundref="_emp_cyl_s_l_8_h" startline="540" endline="540">set_mlim</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a67fbb41e7028467a5f39042d0a9d0874" compoundref="_emp_cyl_s_l_8_h" startline="534" endline="534">set_mrange</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::MMAX</definition>
        <argsstring></argsstring>
        <name>MMAX</name>
        <qualifiedname>EmpCylSL::MMAX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="56" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="56" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1ab3bfa5b72ebb7dd2f3a44705de905b99" compoundref="_emp_cyl_s_l_8_h" startline="528" endline="528">get_mmax</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" compoundref="_emp_cyl_s_l_8_h" startline="822" endline="835">getDensC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" compoundref="_emp_cyl_s_l_8_h" startline="837" endline="850">getDensS</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" compoundref="_emp_cyl_s_l_8_h" startline="853" endline="866">getPotlC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" compoundref="_emp_cyl_s_l_8_h" startline="868" endline="881">getPotlS</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1ae0476e0a062bbdafcb8a953545e12ac1" compoundref="_emp_cyl_s_l_8_h" startline="915" endline="919">sanity</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aff9c53fa3175a325355c0f6826dc18ec" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::MMIN</definition>
        <argsstring></argsstring>
        <name>MMIN</name>
        <qualifiedname>EmpCylSL::MMIN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="57" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="57" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1ae86d4dc7fab3032fbe588eea0bdd1d02" compoundref="_emp_cyl_s_l_8_h" startline="543" endline="543">get_mmin</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1ad025f491b47c2f289833180d974fad00" compoundref="_emp_cyl_s_l_8_h" startline="537" endline="537">set_mmin</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a67fbb41e7028467a5f39042d0a9d0874" compoundref="_emp_cyl_s_l_8_h" startline="534" endline="534">set_mrange</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac40df1334df23c1531f34aefafb11c29" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::mpi_double_buf2</definition>
        <argsstring></argsstring>
        <name>mpi_double_buf2</name>
        <qualifiedname>EmpCylSL::mpi_double_buf2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="88" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a8d92f9c088ceee33e104792ed39d3ea4" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::mpi_double_buf3</definition>
        <argsstring></argsstring>
        <name>mpi_double_buf3</name>
        <qualifiedname>EmpCylSL::mpi_double_buf3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="88" column="31" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae5bf5328414eb27f6f642a7608676f5a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::MPIbufsz</definition>
        <argsstring></argsstring>
        <name>MPIbufsz</name>
        <qualifiedname>EmpCylSL::MPIbufsz</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="89" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a4405587c407e6828884f6f443a420fd9" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::MPIin</definition>
        <argsstring></argsstring>
        <name>MPIin</name>
        <qualifiedname>EmpCylSL::MPIin</qualifiedname>
        <briefdescription>
<para>Storage buffers for MPI. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="85" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac9ef77c51d33e232d5b22d3e5d2f2535" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::MPIin2</definition>
        <argsstring></argsstring>
        <name>MPIin2</name>
        <qualifiedname>EmpCylSL::MPIin2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="85" column="28" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1afe7d4dd224d67776125f8c9cdd28377e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::MPIin_eof</definition>
        <argsstring></argsstring>
        <name>MPIin_eof</name>
        <qualifiedname>EmpCylSL::MPIin_eof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="86" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7dbbd73cd813c11b4157a8f2d3ce8be4" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::MPIout</definition>
        <argsstring></argsstring>
        <name>MPIout</name>
        <qualifiedname>EmpCylSL::MPIout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="85" column="21" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa2e984262e82cc04f868fceed134dcda" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::MPIout2</definition>
        <argsstring></argsstring>
        <name>MPIout2</name>
        <qualifiedname>EmpCylSL::MPIout2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="85" column="35" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aad446c8c59cfa4ce9e945e81f147970f" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::MPIout_eof</definition>
        <argsstring></argsstring>
        <name>MPIout_eof</name>
        <qualifiedname>EmpCylSL::MPIout_eof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="86" column="25" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae4d1454f185faf1bbb801782da5add80" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::MPItable</definition>
        <argsstring></argsstring>
        <name>MPItable</name>
        <qualifiedname>EmpCylSL::MPItable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="89" column="16" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a1966b7be886e21c19de9945e84cf1996" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned EmpCylSL::nbodstot</definition>
        <argsstring></argsstring>
        <name>nbodstot</name>
        <qualifiedname>EmpCylSL::nbodstot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="62" column="12" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="62" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" compoundref="_emp_cyl_s_l_8_h" startline="772" endline="804">setHall</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a9a192aad1ace6a1bc46cb96e7ae13ec2" compoundref="_emp_cyl_s_l_8_h" startline="898" endline="900">setTotal</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa416edc90a399610bc9dfbe3f5fae285" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::Neven</definition>
        <argsstring></argsstring>
        <name>Neven</name>
        <qualifiedname>EmpCylSL::Neven</qualifiedname>
        <briefdescription>
<para>Number of even and odd terms per subspace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="338" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1abc7f555cee56e2f2677c3c1d378e7d93" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NKEEP</definition>
        <argsstring></argsstring>
        <name>NKEEP</name>
        <qualifiedname>EmpCylSL::NKEEP</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="60" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aaef776ee74e1bf29c608b6e635111049" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NLIM</definition>
        <argsstring></argsstring>
        <name>NLIM</name>
        <qualifiedname>EmpCylSL::NLIM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="58" column="12" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="58" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1adcff853a8bc392ce63ec4f2ba5f13cfd" compoundref="_emp_cyl_s_l_8_h" startline="531" endline="531">set_nrange</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a4e41bf39972b5b2255e2ffd521c03863" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NMAX</definition>
        <argsstring></argsstring>
        <name>NMAX</name>
        <qualifiedname>EmpCylSL::NMAX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="54" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a6ec0b65d4efab53a29c62d0afb8fb91d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NMIN</definition>
        <argsstring></argsstring>
        <name>NMIN</name>
        <qualifiedname>EmpCylSL::NMIN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="58" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="58" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1adcff853a8bc392ce63ec4f2ba5f13cfd" compoundref="_emp_cyl_s_l_8_h" startline="531" endline="531">set_nrange</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a25e0bb43aff536fb91927ce3aa30c4e7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::Nodd</definition>
        <argsstring></argsstring>
        <name>Nodd</name>
        <qualifiedname>EmpCylSL::Nodd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="338" column="13" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NORDER</definition>
        <argsstring></argsstring>
        <name>NORDER</name>
        <qualifiedname>EmpCylSL::NORDER</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="59" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="59" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a54a291607a6a7439668c32431496fe9f" compoundref="_emp_cyl_s_l_8_h" startline="549" endline="549">get_order</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" compoundref="_emp_cyl_s_l_8_h" startline="822" endline="835">getDensC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" compoundref="_emp_cyl_s_l_8_h" startline="837" endline="850">getDensS</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" compoundref="_emp_cyl_s_l_8_h" startline="853" endline="866">getPotlC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" compoundref="_emp_cyl_s_l_8_h" startline="868" endline="881">getPotlS</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a1085cebe7aaa975b9ee5a08c5f998787" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned &gt;</type>
        <definition>std::vector&lt;unsigned&gt; EmpCylSL::numbT</definition>
        <argsstring></argsstring>
        <name>numbT</name>
        <qualifiedname>EmpCylSL::numbT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="198" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a23629a6b09bcf37a016db8a2cde23909" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; unsigned &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;unsigned&gt; &gt; EmpCylSL::numbT1</definition>
        <argsstring></argsstring>
        <name>numbT1</name>
        <qualifiedname>EmpCylSL::numbT1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="196" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1af169df94ef9d7b66681fc2bfe6c97870" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1ae28c1cae7b3574cb457c8e1e00a094af" kindref="member">SLGridSphPtr</ref></type>
        <definition>SLGridSphPtr EmpCylSL::ortho</definition>
        <argsstring></argsstring>
        <name>ortho</name>
        <qualifiedname>EmpCylSL::ortho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="108" column="16" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a4677a8c8d6acc5d29e18961267a37637" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <qualifiedname>EmpCylSL::p</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="73" column="21" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aee6bee90dbadeb9b41b8f83d4f6e49a7" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a51068281e8060eadcd0251bbcb73150c" kindref="member">PCAbasisPtr</ref></type>
        <definition>PCAbasisPtr EmpCylSL::pb</definition>
        <argsstring></argsstring>
        <name>pb</name>
        <qualifiedname>EmpCylSL::pb</qualifiedname>
        <briefdescription>
<para>Cache PCA information between calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="320" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1adb6b13dcb746ba039c6268f0bc0b6f55" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::pfac</definition>
        <argsstring></argsstring>
        <name>pfac</name>
        <qualifiedname>EmpCylSL::pfac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="77" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1abf856ef4ab862213fcc5b4accb5f135a" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::potC</definition>
        <argsstring></argsstring>
        <name>potC</name>
        <qualifiedname>EmpCylSL::potC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="112" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="112" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" compoundref="_emp_cyl_s_l_8_h" startline="853" endline="866">getPotlC</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1af7abc1ca18fef42709c86e250716f146" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::potd</definition>
        <argsstring></argsstring>
        <name>potd</name>
        <qualifiedname>EmpCylSL::potd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="104" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a80294caadb34d5e85752bed0f85b2b42" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::potS</definition>
        <argsstring></argsstring>
        <name>potS</name>
        <qualifiedname>EmpCylSL::potS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="117" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="117" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" compoundref="_emp_cyl_s_l_8_h" startline="868" endline="881">getPotlS</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a0e2a9a9df575f2d593769c1a7eccf1f8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; EmpCylSL::r</definition>
        <argsstring></argsstring>
        <name>r</name>
        <qualifiedname>EmpCylSL::r</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="73" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a6aeebcc6e6a594e01e692d3fe0c75e1c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::rank2</definition>
        <argsstring></argsstring>
        <name>rank2</name>
        <qualifiedname>EmpCylSL::rank2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="81" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a83e9d2f440817e5be5c52e8870011a04" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::rank3</definition>
        <argsstring></argsstring>
        <name>rank3</name>
        <qualifiedname>EmpCylSL::rank3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="81" column="13" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a159fe49f58f483a9822df5466d7449b7" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::rforceC</definition>
        <argsstring></argsstring>
        <name>rforceC</name>
        <qualifiedname>EmpCylSL::rforceC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="114" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a424f9d954f4fa089119faa997703ace5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::rforceS</definition>
        <argsstring></argsstring>
        <name>rforceS</name>
        <qualifiedname>EmpCylSL::rforceS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="119" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a6627c10537857cd1da90c8935bba8beb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::Rtable</definition>
        <argsstring></argsstring>
        <name>Rtable</name>
        <qualifiedname>EmpCylSL::Rtable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="110" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="110" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1ad1a0ddf3cf580d8c4d688d1232e5d3ad" compoundref="_emp_cyl_s_l_8_h" startline="765" endline="765">get_rtable</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7e8c6aaa07f701a510982df758e2722c" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned EmpCylSL::sampT</definition>
        <argsstring></argsstring>
        <name>sampT</name>
        <qualifiedname>EmpCylSL::sampT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="200" column="12" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a488920dfa102b74d4d23ed0117d0378b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" kindref="member">VarMat</ref></type>
        <definition>VarMat EmpCylSL::SC</definition>
        <argsstring></argsstring>
        <name>SC</name>
        <qualifiedname>EmpCylSL::SC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="96" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a532118690a60d5648b4ed0e6a5eb0e8a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" kindref="member">VarMat</ref></type>
        <definition>VarMat EmpCylSL::SCe</definition>
        <argsstring></argsstring>
        <name>SCe</name>
        <qualifiedname>EmpCylSL::SCe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="96" column="16" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a9888a2f438ab079310e669c0796a0d30" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" kindref="member">VarMat</ref></type>
        <definition>VarMat EmpCylSL::SCo</definition>
        <argsstring></argsstring>
        <name>SCo</name>
        <qualifiedname>EmpCylSL::SCo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="96" column="20" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa39cf62fe73b366dea72632ced5fbea6" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_emp_cyl_s_l_1_1_mstep_array" kindref="compound">MstepArray</ref></type>
        <definition>MstepArray EmpCylSL::sinL</definition>
        <argsstring></argsstring>
        <name>sinL</name>
        <qualifiedname>EmpCylSL::sinL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="152" column="24" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1abde6b86c881ce7f5203e851e29641f69" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; EmpCylSL::sinm</definition>
        <argsstring></argsstring>
        <name>sinm</name>
        <qualifiedname>EmpCylSL::sinm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="105" column="20" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a82b0d7db830198f6a65ec6548bebc789" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_emp_cyl_s_l_1_1_mstep_array" kindref="compound">MstepArray</ref></type>
        <definition>MstepArray EmpCylSL::sinN</definition>
        <argsstring></argsstring>
        <name>sinN</name>
        <qualifiedname>EmpCylSL::sinN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="152" column="29" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1abaa3448ce6126be4f4e33e363e32f3d3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" kindref="member">VarMat</ref></type>
        <definition>VarMat EmpCylSL::SS</definition>
        <argsstring></argsstring>
        <name>SS</name>
        <qualifiedname>EmpCylSL::SS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="96" column="13" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a85ab9fc8d96441ac0f00454a9953a04b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" kindref="member">VarMat</ref></type>
        <definition>VarMat EmpCylSL::SSe</definition>
        <argsstring></argsstring>
        <name>SSe</name>
        <qualifiedname>EmpCylSL::SSe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="96" column="24" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1af391eb68d38ed089e8d89e30f386efa1" prot="protected" static="no" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" kindref="member">VarMat</ref></type>
        <definition>VarMat EmpCylSL::SSo</definition>
        <argsstring></argsstring>
        <name>SSo</name>
        <qualifiedname>EmpCylSL::SSo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="96" column="28" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a264b86c3f7815f0a1159ce635bb8095c" prot="protected" static="no" mutable="no">
        <type>MPI_Status</type>
        <definition>MPI_Status EmpCylSL::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <qualifiedname>EmpCylSL::status</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="90" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aaceea5f18b07d1825484be021afb0392" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::tabd</definition>
        <argsstring></argsstring>
        <name>tabd</name>
        <qualifiedname>EmpCylSL::tabd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="205" column="29" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a4a4aef6e003e170418c14ffeec5157a6" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::tabf</definition>
        <argsstring></argsstring>
        <name>tabf</name>
        <qualifiedname>EmpCylSL::tabf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="205" column="24" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae9e179b3f0465c094b8f1006d34ec6af" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::table</definition>
        <argsstring></argsstring>
        <name>table</name>
        <qualifiedname>EmpCylSL::table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="122" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a00277782d89dd76900b33011a3013a6e" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd EmpCylSL::tabp</definition>
        <argsstring></argsstring>
        <name>tabp</name>
        <qualifiedname>EmpCylSL::tabp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="205" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa65adb8f7180df1379cba2bf3875d674" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::tdens</definition>
        <argsstring></argsstring>
        <name>tdens</name>
        <qualifiedname>EmpCylSL::tdens</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="125" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a46fe2e58f46713c5fc4b6c14d098c5c1" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::tpot</definition>
        <argsstring></argsstring>
        <name>tpot</name>
        <qualifiedname>EmpCylSL::tpot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="124" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a5167f382aa884a69a1ef8db6e29b0f90" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::trforce</definition>
        <argsstring></argsstring>
        <name>trforce</name>
        <qualifiedname>EmpCylSL::trforce</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="126" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a53492da2afd7c58fe5ab4264aea84007" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::tvar</definition>
        <argsstring></argsstring>
        <name>tvar</name>
        <qualifiedname>EmpCylSL::tvar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="190" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a219f95b6d3df7abbe26153d2afd7132d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::tzforce</definition>
        <argsstring></argsstring>
        <name>tzforce</name>
        <qualifiedname>EmpCylSL::tzforce</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="127" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a9dc835dbfd02c64df6a771a709a9d3ce" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::use_mpi</definition>
        <argsstring></argsstring>
        <name>use_mpi</name>
        <qualifiedname>EmpCylSL::use_mpi</qualifiedname>
        <briefdescription>
<para>MPI is active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="341" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac5989dfc11361c8449b9aa8bfb5a4a3c" prot="protected" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t EmpCylSL::used_lock</definition>
        <argsstring></argsstring>
        <name>used_lock</name>
        <qualifiedname>EmpCylSL::used_lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="322" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aee7673e75b8fe2fa46f8ce4f26c750fb" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::var</definition>
        <argsstring></argsstring>
        <name>var</name>
        <qualifiedname>EmpCylSL::var</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="99" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a8bbce4c69f2d703c159a94fa1332317b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::varE</definition>
        <argsstring></argsstring>
        <name>varE</name>
        <qualifiedname>EmpCylSL::varE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="99" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ad4039000460ea132e1d1606cbac03f84" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::varO</definition>
        <argsstring></argsstring>
        <name>varO</name>
        <qualifiedname>EmpCylSL::varO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="99" column="24" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a554140e8382732014abb3e95f8c54f91" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::vc</definition>
        <argsstring></argsstring>
        <name>vc</name>
        <qualifiedname>EmpCylSL::vc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="203" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a67a63f563459749ff1d353c9debce1ad" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
        <definition>std::vector&lt;Eigen::MatrixXd&gt; EmpCylSL::vs</definition>
        <argsstring></argsstring>
        <name>vs</name>
        <qualifiedname>EmpCylSL::vs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="203" column="18" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae7a9188b6870dbc7e3b071961fafd51f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::XMAX</definition>
        <argsstring></argsstring>
        <name>XMAX</name>
        <qualifiedname>EmpCylSL::XMAX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="110" column="22" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a19936b6c0bcde061a1aa72cec91f0ff5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::XMIN</definition>
        <argsstring></argsstring>
        <name>XMIN</name>
        <qualifiedname>EmpCylSL::XMIN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="110" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a5b3feb166e2e84e61233a42324d046d4" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::YMAX</definition>
        <argsstring></argsstring>
        <name>YMAX</name>
        <qualifiedname>EmpCylSL::YMAX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="65" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae5c75b53f89ace4de21856f24d0648f0" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::YMIN</definition>
        <argsstring></argsstring>
        <name>YMIN</name>
        <qualifiedname>EmpCylSL::YMIN</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="65" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aa7c0b484a9d7085e0335beb11ee1c76a" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::zforceC</definition>
        <argsstring></argsstring>
        <name>zforceC</name>
        <qualifiedname>EmpCylSL::zforceC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="115" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7a1ac165e19334b4603046105628e1eb" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;Eigen::MatrixXd&gt; &gt; EmpCylSL::zforceS</definition>
        <argsstring></argsstring>
        <name>zforceS</name>
        <qualifiedname>EmpCylSL::zforceS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="120" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="120" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aaae6d0d738e28ae17f0450ac8888ff38" prot="protected" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int EmpCylSL::cmagic</definition>
        <argsstring></argsstring>
        <name>cmagic</name>
        <qualifiedname>EmpCylSL::cmagic</qualifiedname>
        <initializer>= 0xc0a57a3</initializer>
        <briefdescription>
<para>Coefficient magic number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="211" column="36" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac1da77e65816b15f8514d8869b8bdcc3" prot="protected" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int EmpCylSL::hmagic</definition>
        <argsstring></argsstring>
        <name>hmagic</name>
        <qualifiedname>EmpCylSL::hmagic</qualifiedname>
        <initializer>= 0xc0a57a1</initializer>
        <briefdescription>
<para><ref refid="class_basis" kindref="compound">Basis</ref> magic number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="208" column="36" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a0f441f656522cec142a0576d0b8712b9" prot="protected" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EmpCylSL::Version</definition>
        <argsstring></argsstring>
        <name>Version</name>
        <qualifiedname>EmpCylSL::Version</qualifiedname>
        <initializer>= &quot;1.0&quot;</initializer>
        <briefdescription>
<para>Cache versioning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="235" column="35" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="235" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a69cea546b093407c96f564e9e4fc132a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::CMAPR</definition>
        <argsstring></argsstring>
        <name>CMAPR</name>
        <qualifiedname>EmpCylSL::CMAPR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TRUE if we are using coordinate mapping (0=no, 1 rational-function mapping (default) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="407" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a56526a140c4c34248902966681124db2" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::CMAPZ</definition>
        <argsstring></argsstring>
        <name>CMAPZ</name>
        <qualifiedname>EmpCylSL::CMAPZ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TRUE if we are using coordinate mapping (0=no, 1 for vertical hyberbolic mapping (default), 2 for power mampping) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="411" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7b1705c7239daa9a9274ea07cc687ea8" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07f" kindref="member">EmpModel</ref>, std::string &gt;</type>
        <definition>std::map&lt;EmpModel, std::string&gt; EmpCylSL::EmpModelLabs</definition>
        <argsstring></argsstring>
        <name>EmpModelLabs</name>
        <qualifiedname>EmpCylSL::EmpModelLabs</qualifiedname>
        <briefdescription>
<para>Convert EmpModel to ascii label. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="457" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ae63d3655cdce09b95b3d656b3fb2b1bd" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::enforce_limits</definition>
        <argsstring></argsstring>
        <name>enforce_limits</name>
        <qualifiedname>EmpCylSL::enforce_limits</qualifiedname>
        <briefdescription>
<para>No extrapolating beyond grid (default: false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="417" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1afb2e483e8e61f9b89e6e60c5a9042c71" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::HALLFREQ</definition>
        <argsstring></argsstring>
        <name>HALLFREQ</name>
        <qualifiedname>EmpCylSL::HALLFREQ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selector output freq (this only affects diagnostic output). Current default is to perform Hall on every step when selected </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="436" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ababc9c96aa1aafb45b9eac7d5870e127" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::HEXP</definition>
        <argsstring></argsstring>
        <name>HEXP</name>
        <qualifiedname>EmpCylSL::HEXP</qualifiedname>
        <briefdescription>
<para>Hall smoothing exponent (default: 1.0) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="439" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a010b7760c0b40c5c7eb43f0913d75f9f" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::HFAC</definition>
        <argsstring></argsstring>
        <name>HFAC</name>
        <qualifiedname>EmpCylSL::HFAC</qualifiedname>
        <briefdescription>
<para>Fraction of table range for basis images (for debug) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="460" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a448caae9d6d4f439c18ca51d9bebe478" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::logarithmic</definition>
        <argsstring></argsstring>
        <name>logarithmic</name>
        <qualifiedname>EmpCylSL::logarithmic</qualifiedname>
        <briefdescription>
<para>TRUE if mapping is logarithmic (default: false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="414" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1acab556b4b8f88e42950851f45fd4eaf5" prot="public" static="yes" mutable="no">
        <type><ref refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07f" kindref="member">EmpModel</ref></type>
        <definition>EmpModel EmpCylSL::mtype</definition>
        <argsstring></argsstring>
        <name>mtype</name>
        <qualifiedname>EmpCylSL::mtype</qualifiedname>
        <briefdescription>
<para>Density model type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="420" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1adc51b0fb5f7e79e450d931ba715e75ab" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::NewCache</definition>
        <argsstring></argsstring>
        <name>NewCache</name>
        <qualifiedname>EmpCylSL::NewCache</qualifiedname>
        <briefdescription>
<para>Use YAML header in cache file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="451" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a62e259dd548f50712047634709d45b29" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::NewCoefs</definition>
        <argsstring></argsstring>
        <name>NewCoefs</name>
        <qualifiedname>EmpCylSL::NewCoefs</qualifiedname>
        <briefdescription>
<para>Use YAML header in coefficient file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="454" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a3a514d4baf7c51ad65ae9c0934313b08" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NOUT</definition>
        <argsstring></argsstring>
        <name>NOUT</name>
        <qualifiedname>EmpCylSL::NOUT</qualifiedname>
        <briefdescription>
<para>Number of bases to print (for debug) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="429" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1aafe9d97b940c6bf5a322784c53d49b5f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NUMR</definition>
        <argsstring></argsstring>
        <name>NUMR</name>
        <qualifiedname>EmpCylSL::NUMR</qualifiedname>
        <briefdescription>
<para>Number of entries in radial basis table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="432" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a3c5efbaa5c0823fa2df420dbb4ad701c" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NUMX</definition>
        <argsstring></argsstring>
        <name>NUMX</name>
        <qualifiedname>EmpCylSL::NUMX</qualifiedname>
        <briefdescription>
<para>Radial basis grid in radial direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="423" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="423" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" compoundref="_emp_cyl_s_l_8_h" startline="822" endline="835">getDensC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" compoundref="_emp_cyl_s_l_8_h" startline="837" endline="850">getDensS</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" compoundref="_emp_cyl_s_l_8_h" startline="853" endline="866">getPotlC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" compoundref="_emp_cyl_s_l_8_h" startline="868" endline="881">getPotlS</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a3ca5a4b84952e41185bc851f0b0a4310" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int EmpCylSL::NUMY</definition>
        <argsstring></argsstring>
        <name>NUMY</name>
        <qualifiedname>EmpCylSL::NUMY</qualifiedname>
        <briefdescription>
<para>Radial basis grid in vertical direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="426" column="14" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="426" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" compoundref="_emp_cyl_s_l_8_h" startline="822" endline="835">getDensC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" compoundref="_emp_cyl_s_l_8_h" startline="837" endline="850">getDensS</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" compoundref="_emp_cyl_s_l_8_h" startline="853" endline="866">getPotlC</referencedby>
        <referencedby refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" compoundref="_emp_cyl_s_l_8_h" startline="868" endline="881">getPotlS</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a326d046bf01703dccd3808fde1f366ef" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::PCADRY</definition>
        <argsstring></argsstring>
        <name>PCADRY</name>
        <qualifiedname>EmpCylSL::PCADRY</qualifiedname>
        <briefdescription>
<para>Compute taper but to not apply to coefficients (default: true) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="400" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ad1c941f70ba409b1267a5c602192a06f" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::PCAEOF</definition>
        <argsstring></argsstring>
        <name>PCAEOF</name>
        <qualifiedname>EmpCylSL::PCAEOF</qualifiedname>
        <briefdescription>
<para>TRUE if EOF diagnostics are on (default: false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="397" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="397" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" compoundref="_emp_cyl_s_l_8_h" startline="772" endline="804">setHall</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a7421fd16b5bc2b716abdadeb2ee4fbda" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::PCAVAR</definition>
        <argsstring></argsstring>
        <name>PCAVAR</name>
        <qualifiedname>EmpCylSL::PCAVAR</qualifiedname>
        <briefdescription>
<para>TRUE if signal-to-noise methods are on (default: false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="391" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="391" bodyend="-1"/>
        <referencedby refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" compoundref="_emp_cyl_s_l_8_h" startline="772" endline="804">setHall</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a591fc0a920c89c08db6e8cdeb288daf5" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EmpCylSL::PCAVTK</definition>
        <argsstring></argsstring>
        <name>PCAVTK</name>
        <qualifiedname>EmpCylSL::PCAVTK</qualifiedname>
        <briefdescription>
<para>TRUE if VTK diagnostics are on (default: false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="394" column="15" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1ac9e89c53c5668ec51122f129aea8d203" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::PPOW</definition>
        <argsstring></argsstring>
        <name>PPOW</name>
        <qualifiedname>EmpCylSL::PPOW</qualifiedname>
        <briefdescription>
<para>Power exponent for EOF conditioning density function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="448" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a3e03b95b63b369896cbbaf74d0b6ccda" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::RMAX</definition>
        <argsstring></argsstring>
        <name>RMAX</name>
        <qualifiedname>EmpCylSL::RMAX</qualifiedname>
        <briefdescription>
<para>Maximum radial value for basis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="445" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a881a2feeaab884247de5ea52a244a957" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double EmpCylSL::RMIN</definition>
        <argsstring></argsstring>
        <name>RMIN</name>
        <qualifiedname>EmpCylSL::RMIN</qualifiedname>
        <briefdescription>
<para>Minimum radial value for basis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="442" column="17" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a5fb42c68731465996008ec4276d458d5" prot="public" static="yes" mutable="no">
        <type>unsigned</type>
        <definition>unsigned EmpCylSL::VFLAG</definition>
        <argsstring></argsstring>
        <name>VFLAG</name>
        <qualifiedname>EmpCylSL::VFLAG</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verbose level flags bit Action <hruler/>
 0 = quiet 1 = SL model output 2 = EOF diagnostics 4 = Accumulation, PCA Hall, and all other diagnostics 8 = Debug-level communication details 16 = Timing info </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="472" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_emp_cyl_s_l_1a4efa4f0654c7c45724897fa019a7b8b3" prot="public" static="yes" mutable="no">
        <type>unsigned</type>
        <definition>unsigned EmpCylSL::VTKFRQ</definition>
        <argsstring></argsstring>
        <name>VTKFRQ</name>
        <qualifiedname>EmpCylSL::VTKFRQ</qualifiedname>
        <briefdescription>
<para>VTK diagnostic frequency (default: false) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="403" column="19" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="403" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_emp_cyl_s_l_1a03c78efa441af75c60e8165e0c227b3d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate_eof_thread_call</definition>
        <argsstring>(int id, std::vector&lt; Particle &gt; *p, bool verbose)</argsstring>
        <name>accumulate_eof_thread_call</name>
        <qualifiedname>EmpCylSL::accumulate_eof_thread_call</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_particle" kindref="compound">Particle</ref> &gt; *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>Thread body for eof accumulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="328" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aa4f6f96e4ffed81950ee435d661f98fc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate_thread_call</definition>
        <argsstring>(int id, std::vector&lt; Particle &gt; *p, int mlevel, bool verbose)</argsstring>
        <name>accumulate_thread_call</name>
        <qualifiedname>EmpCylSL::accumulate_thread_call</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_particle" kindref="compound">Particle</ref> &gt; *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlevel</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>Thread body for coef accumulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="325" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a895b2b9cd9a80389b0a8e918bedee390" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::cache_grid</definition>
        <argsstring>(int, std::string file)</argsstring>
        <name>cache_grid</name>
        <qualifiedname>EmpCylSL::cache_grid</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="241" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a9261c96b5c2f59bf357e9eff0e0f005d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::compute_eof_grid</definition>
        <argsstring>(int request_id, int m)</argsstring>
        <name>compute_eof_grid</name>
        <qualifiedname>EmpCylSL::compute_eof_grid</qualifiedname>
        <param>
          <type>int</type>
          <declname>request_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="221" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a57d043d255d6b3a9a30c2be6bbbcb329" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::compute_even_odd</definition>
        <argsstring>(int request_id, int m)</argsstring>
        <name>compute_even_odd</name>
        <qualifiedname>EmpCylSL::compute_even_odd</qualifiedname>
        <param>
          <type>int</type>
          <declname>request_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="222" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1adc40eee109b96edacb4bcf58e34cf881" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::densR</definition>
        <argsstring>(double R)</argsstring>
        <name>densR</name>
        <qualifiedname>EmpCylSL::densR</qualifiedname>
        <param>
          <type>double</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="245" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aa15dc03935856aaebdb4ee70778b6877" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::eigen_problem</definition>
        <argsstring>(int request_id, int M, Timer &amp;timer)</argsstring>
        <name>eigen_problem</name>
        <qualifiedname>EmpCylSL::eigen_problem</qualifiedname>
        <param>
          <type>int</type>
          <declname>request_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="class_timer" kindref="compound">Timer</ref> &amp;</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="223" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af2304c89b46f7bbbfb5ba0ffc9f91c3d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::get_pot</definition>
        <argsstring>(Eigen::MatrixXd &amp;, Eigen::MatrixXd &amp;, double, double)</argsstring>
        <name>get_pot</name>
        <qualifiedname>EmpCylSL::get_pot</qualifiedname>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="243" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af7a9d3523d76046d94b09fbee943f388" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::integral</definition>
        <argsstring>(int, int, int, int)</argsstring>
        <name>integral</name>
        <qualifiedname>EmpCylSL::integral</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="242" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ade494a2d028ce2cafe796f6bae9af742" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::make_grid</definition>
        <argsstring>()</argsstring>
        <name>make_grid</name>
        <qualifiedname>EmpCylSL::make_grid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="218" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ad5c739203d28501087b57c1745a932e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_emp_cyl_s_l_1a5f02b326041b8aa3527a4a22b0505f73" kindref="member">SphModTblPtr</ref></type>
        <definition>SphModTblPtr EmpCylSL::make_sl</definition>
        <argsstring>()</argsstring>
        <name>make_sl</name>
        <qualifiedname>EmpCylSL::make_sl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="216" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aad0b13603aa2c4cc3af549530800d383" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::massR</definition>
        <argsstring>(double R)</argsstring>
        <name>massR</name>
        <qualifiedname>EmpCylSL::massR</qualifiedname>
        <param>
          <type>double</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="244" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a66ecaa8742fce737aa016072c5fc8d83" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::parityCheck</definition>
        <argsstring>(const std::string &amp;prefix)</argsstring>
        <name>parityCheck</name>
        <qualifiedname>EmpCylSL::parityCheck</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="226" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ae0483d13ea7eb6db18105537d26e8e9a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EmpCylSL::ReadH5Cache</definition>
        <argsstring>()</argsstring>
        <name>ReadH5Cache</name>
        <qualifiedname>EmpCylSL::ReadH5Cache</qualifiedname>
        <briefdescription>
<para>Read HDF5 cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="232" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ae77c27b192bfc7feb6fc5834f723b73c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::receive_eof</definition>
        <argsstring>(int request_id, int m)</argsstring>
        <name>receive_eof</name>
        <qualifiedname>EmpCylSL::receive_eof</qualifiedname>
        <param>
          <type>int</type>
          <declname>request_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="220" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a1d8a54dea56c53271250a52a36268d26" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::send_eof_grid</definition>
        <argsstring>()</argsstring>
        <name>send_eof_grid</name>
        <qualifiedname>EmpCylSL::send_eof_grid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="219" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a0282993cc0ecbc8077b3716f5d423240" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setup_eof_grid</definition>
        <argsstring>(void)</argsstring>
        <name>setup_eof_grid</name>
        <qualifiedname>EmpCylSL::setup_eof_grid</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="225" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ae2b67b9d3e70ccf7e285d06a7b8a9ea5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::WriteH5Cache</definition>
        <argsstring>()</argsstring>
        <name>WriteH5Cache</name>
        <qualifiedname>EmpCylSL::WriteH5Cache</qualifiedname>
        <briefdescription>
<para>Write HDF5 cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="229" column="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_emp_cyl_s_l_1a174b3c5c2d43c1c92ae475a2e9bd5768" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAML::Node</type>
        <definition>static YAML::Node EmpCylSL::getHeader</definition>
        <argsstring>(const std::string &amp;cachefile)</argsstring>
        <name>getHeader</name>
        <qualifiedname>EmpCylSL::getHeader</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>cachefile</declname>
        </param>
        <briefdescription>
<para>Read the cache and return YAML db. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="250" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1adbca4138f5230f4e2817376a73e33a1b" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAML::Node</type>
        <definition>static YAML::Node EmpCylSL::getHeader_binary</definition>
        <argsstring>(const std::string &amp;cachefile)</argsstring>
        <name>getHeader_binary</name>
        <qualifiedname>EmpCylSL::getHeader_binary</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>cachefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="252" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a28d96e9218fc77f4c9b65c2cc7142f3d" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAML::Node</type>
        <definition>static YAML::Node EmpCylSL::getHeader_hdf5</definition>
        <argsstring>(const std::string &amp;cachefile)</argsstring>
        <name>getHeader_hdf5</name>
        <qualifiedname>EmpCylSL::getHeader_hdf5</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>cachefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="251" column="21"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_emp_cyl_s_l_1a29c9054e96a255d4fba26ad01b79f553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate</definition>
        <argsstring>(double r, double z, double phi, double mass, unsigned long seq, int id, int mlev=0, bool compute=false)</argsstring>
        <name>accumulate</name>
        <qualifiedname>EmpCylSL::accumulate</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlev</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compute</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add single particle to coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="654" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a247309c8de363bdacd60769343ca5a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate</definition>
        <argsstring>(vector&lt; Particle &gt; &amp;p, int mlev=0, bool verbose=false, bool compute=false)</argsstring>
        <name>accumulate</name>
        <qualifiedname>EmpCylSL::accumulate</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="class_particle" kindref="compound">Particle</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlev</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compute</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Accumulate coefficients from particle distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="639" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a922d558463e3dd98e3d1bba0b193797c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate_eof</definition>
        <argsstring>(double r, double z, double phi, double mass, int id, int mlev=0)</argsstring>
        <name>accumulate_eof</name>
        <qualifiedname>EmpCylSL::accumulate_eof</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add single particle to EOF coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="658" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ab7e13975e0b5e76a90d62b8173b2fd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate_eof</definition>
        <argsstring>(vector&lt; Particle &gt; &amp;p, bool verbose=false)</argsstring>
        <name>accumulate_eof</name>
        <qualifiedname>EmpCylSL::accumulate_eof</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="class_particle" kindref="compound">Particle</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Make EOF from particle distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="647" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a315b273faa77c0ce4a0d8470af77c31d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate_eof_thread</definition>
        <argsstring>(vector&lt; Particle &gt; &amp;p, bool verbose=false)</argsstring>
        <name>accumulate_eof_thread</name>
        <qualifiedname>EmpCylSL::accumulate_eof_thread</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="class_particle" kindref="compound">Particle</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make EOF from particle distribution by thread. Used by external applications. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="651" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a2eca026c8c9a47db68dde26ff99ca5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulate_thread</definition>
        <argsstring>(vector&lt; Particle &gt; &amp;p, int mlev=0, bool verbose=false)</argsstring>
        <name>accumulate_thread</name>
        <qualifiedname>EmpCylSL::accumulate_thread</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="class_particle" kindref="compound">Particle</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mlev</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accumulate coefficients from particle distribution by thread. Used by external applications. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="644" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ae17f2940466adeeab60415fbb9a0a903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::accumulated_dens_eval</definition>
        <argsstring>(double r, double z, double phi, double &amp;d0)</argsstring>
        <name>accumulated_dens_eval</name>
        <qualifiedname>EmpCylSL::accumulated_dens_eval</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>d0</declname>
        </param>
        <briefdescription>
<para>Evaluate density field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="666" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a7f7f8c1328be01fbcfd2257ec617dae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::accumulated_eval</definition>
        <argsstring>(double r, double z, double phi, double &amp;p0, double &amp;p, double &amp;fr, double &amp;fz, double &amp;fp)</argsstring>
        <name>accumulated_eval</name>
        <qualifiedname>EmpCylSL::accumulated_eval</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Evaluate potential and force field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="662" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a18e0d78655361a9a734ad2e6df769d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::accumulated_midplane_eval</definition>
        <argsstring>(double r, double zmin, double zmax, double phi, int num=40)</argsstring>
        <name>accumulated_midplane_eval</name>
        <qualifiedname>EmpCylSL::accumulated_midplane_eval</qualifiedname>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
          <defval>40</defval>
        </param>
        <briefdescription>
<para>Evaluate peak density height within two limits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="669" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a010b121e9d91a34a9698e670b6bbb7bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EmpCylSL::coefs_made_all</definition>
        <argsstring>()</argsstring>
        <name>coefs_made_all</name>
        <qualifiedname>EmpCylSL::coefs_made_all</qualifiedname>
        <briefdescription>
<para>True if coefficients are made at all levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="621" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="621" bodyend="626"/>
        <references refid="class_emp_cyl_s_l_1af20a77b1f4fd2c8e813d98711460e695" compoundref="_emp_cyl_s_l_8_h" startline="213">coefs_made</references>
        <references refid="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" compoundref="_emp_cyl_s_l_8_h" startline="67">M</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a0405d6102726bae6b522efd162ff8d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::compare_basis</definition>
        <argsstring>(const EmpCylSL *p)</argsstring>
        <name>compare_basis</name>
        <qualifiedname>EmpCylSL::compare_basis</qualifiedname>
        <param>
          <type>const <ref refid="class_emp_cyl_s_l" kindref="compound">EmpCylSL</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compare current basis with another for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="731" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a791dca5c81aa700228f61cbe00327113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::create_deprojection</definition>
        <argsstring>(double H, double Rfactor, int numR, int numI, AxiDiskPtr func)</argsstring>
        <name>create_deprojection</name>
        <qualifiedname>EmpCylSL::create_deprojection</qualifiedname>
        <param>
          <type>double</type>
          <declname>H</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Rfactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numI</declname>
        </param>
        <param>
          <type><ref refid="class_emp_cyl_s_l_1a686c18b7deb23a96b0608d96a7d13164" kindref="member">AxiDiskPtr</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute deprojection of axisymmetric disk for and use this generate the EOF spherical basis. The scale length must be O(1) with scale height H in scale length units. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="564" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a142075bc56f2792e7f9427a1b20fe43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::d_y_to_z</definition>
        <argsstring>(double y)</argsstring>
        <name>d_y_to_z</name>
        <qualifiedname>EmpCylSL::d_y_to_z</qualifiedname>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>For measure transformation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="558" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af4346551a09d18530b7cd80cec281110" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::determine_acceleration_and_potential</definition>
        <argsstring>()</argsstring>
        <name>determine_acceleration_and_potential</name>
        <qualifiedname>EmpCylSL::determine_acceleration_and_potential</qualifiedname>
        <briefdescription>
<para>Necessary member function currently unused (change design?) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="636" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="636" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a2b600702935611bdd72f5c7c7094fc53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::determine_coefficients</definition>
        <argsstring>()</argsstring>
        <name>determine_coefficients</name>
        <qualifiedname>EmpCylSL::determine_coefficients</qualifiedname>
        <briefdescription>
<para>Necessary member function currently unused (change design?) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="633" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="633" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a6fbec197b1432a4ba8b565b613953add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_basis</definition>
        <argsstring>(const std::string &amp;name, int step, double Rmax=-1.0)</argsstring>
        <name>dump_basis</name>
        <qualifiedname>EmpCylSL::dump_basis</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Rmax</declname>
          <defval>-1.0</defval>
        </param>
        <briefdescription>
<para>Plot basis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="706" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a667aeb1e86302010a4d0d9207e9b24fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_coefs</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>dump_coefs</name>
        <qualifiedname>EmpCylSL::dump_coefs</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump out coefficients to output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="700" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aa3d995b136f2f8c713c3551dd14577a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_coefs_binary</definition>
        <argsstring>(std::ostream &amp;out, double time)</argsstring>
        <name>dump_coefs_binary</name>
        <qualifiedname>EmpCylSL::dump_coefs_binary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Dump out coefficients to stream in bianry format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="703" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a232a9a2eac79772432cc3fc033ef46b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_eof_file</definition>
        <argsstring>(const std::string &amp;eof_file, const std::string &amp;dump_file)</argsstring>
        <name>dump_eof_file</name>
        <qualifiedname>EmpCylSL::dump_eof_file</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>eof_file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dump_file</declname>
        </param>
        <briefdescription>
<para>Dump the EOF basis in ascii format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="522" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a0e97a59d8de16ea6ed7059406a4dc4e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_images</definition>
        <argsstring>(const std::string &amp;OUTFILE, double XYOUT, double ZOUT, int OUTR, int OUTZ, bool logscale)</argsstring>
        <name>dump_images</name>
        <qualifiedname>EmpCylSL::dump_images</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>OUTFILE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>XYOUT</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ZOUT</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTZ</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>logscale</declname>
        </param>
        <briefdescription>
<para>Plot full fields for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="709" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af268662f8998695185625f734f028a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_images_basis</definition>
        <argsstring>(const std::string &amp;OUTFILE, double XYOUT, double ZOUT, int OUTR, int OUTZ, bool logscale, int M1, int M2, int N1, int N2)</argsstring>
        <name>dump_images_basis</name>
        <qualifiedname>EmpCylSL::dump_images_basis</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>OUTFILE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>XYOUT</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ZOUT</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTZ</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>logscale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N2</declname>
        </param>
        <briefdescription>
<para>Plot basis images for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="714" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a85056f370f790a6f05c38319d5e407ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_images_basis_eof</definition>
        <argsstring>(const std::string &amp;runtag, double XYOUT, double ZOUT, int OUTR, int OUTZ, int M, int N, int cnt, const Eigen::VectorXd &amp;tp)</argsstring>
        <name>dump_images_basis_eof</name>
        <qualifiedname>EmpCylSL::dump_images_basis_eof</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>runtag</declname>
        </param>
        <param>
          <type>double</type>
          <declname>XYOUT</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ZOUT</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
<para>Plot EOF basis images for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="725" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a2f3e7464c373fa3c9d0a782b1e2187ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::dump_images_basis_pca</definition>
        <argsstring>(const std::string &amp;runtag, double XYOUT, double ZOUT, int OUTR, int OUTZ, int M, int N, int cnt)</argsstring>
        <name>dump_images_basis_pca</name>
        <qualifiedname>EmpCylSL::dump_images_basis_pca</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>runtag</declname>
        </param>
        <param>
          <type>double</type>
          <declname>XYOUT</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ZOUT</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>OUTZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>Plot PCA basis images for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="720" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af99016daf180ebe406394ee57e3b9a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EmpCylSL::EmpCylSL</definition>
        <argsstring>()</argsstring>
        <name>EmpCylSL</name>
        <qualifiedname>EmpCylSL::EmpCylSL</qualifiedname>
        <briefdescription>
<para>Constructor (reset must called later) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="476" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a3a311372368aab409ba209051da72adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EmpCylSL::EmpCylSL</definition>
        <argsstring>(int mlim, const std::string cache)</argsstring>
        <name>EmpCylSL</name>
        <qualifiedname>EmpCylSL::EmpCylSL</qualifiedname>
        <param>
          <type>int</type>
          <declname>mlim</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
<para>Construct from cache file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="505" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a080959b56ba7865b65f5c158f520d0c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EmpCylSL::EmpCylSL</definition>
        <argsstring>(int numr, int lmax, int mmax, int nord, double ascale, double hscale, int Nodd, std::string cachename)</argsstring>
        <name>EmpCylSL</name>
        <qualifiedname>EmpCylSL::EmpCylSL</qualifiedname>
        <param>
          <type>int</type>
          <declname>numr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nord</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ascale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hscale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Nodd</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>cachename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor with parameters</para>
<para><simplesect kind="par"><title>Parameters:</title><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multistep</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of coefficient levels for n-body</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the spherical radial order of the input basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the spherical angular order of the input basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mmax</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output aximuthal order for the EOF basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nord</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output radial order for the EOF basis</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ascale</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target disk scale LENGTH</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hscale</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target disk scale HEIGHT</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of vertically odd parity basis functions. If unspecified, you get eigenvalue order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="500" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af9d845267ad87dcffa8de0ed18375a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::generate_eof</definition>
        <argsstring>(int numr, int nump, int numt, std::function&lt; double(double, double, double, int)&gt; f)</argsstring>
        <name>generate_eof</name>
        <qualifiedname>EmpCylSL::generate_eof</qualifiedname>
        <param>
          <type>int</type>
          <declname>numr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nump</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numt</declname>
        </param>
        <param>
          <type>std::function&lt; double(double, double, double, int)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate EOF by direct integration conditioned on a user supplied function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of radial knots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nump</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of azimuthal knots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numt</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of inclination knots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>is the user-supplied density target function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If func is axisymmetric, you may use nump=1 to save computation time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="577" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a35462b138d3301822560e2c42bd88751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::get_all</definition>
        <argsstring>(int m, int n, double r, double z, double phi, double &amp;p, double &amp;d, double &amp;fr, double &amp;fz, double &amp;fp)</argsstring>
        <name>get_all</name>
        <qualifiedname>EmpCylSL::get_all</qualifiedname>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Get a single basis function values for a phase-space point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="581" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1adb2fa176ce9aad23f30408140174cbc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::get_coefs</definition>
        <argsstring>(int mm, Eigen::VectorXd &amp;cos1, Eigen::VectorXd &amp;sin1)</argsstring>
        <name>get_coefs</name>
        <qualifiedname>EmpCylSL::get_coefs</qualifiedname>
        <param>
          <type>int</type>
          <declname>mm</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>cos1</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>sin1</declname>
        </param>
        <briefdescription>
<para>Get coefficients from Vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="686" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aefdce8f742d10ee3833b9f57ac125d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::get_coefs</definition>
        <argsstring>(int mm, std::vector&lt; double &gt; &amp;cos1, std::vector&lt; double &gt; &amp;sin1)</argsstring>
        <name>get_coefs</name>
        <qualifiedname>EmpCylSL::get_coefs</qualifiedname>
        <param>
          <type>int</type>
          <declname>mm</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>cos1</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sin1</declname>
        </param>
        <briefdescription>
<para>Get coefficients from std::vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="689" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a7da7158d060f7d325bd5146d6f964cc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::get_mlim</definition>
        <argsstring>()</argsstring>
        <name>get_mlim</name>
        <qualifiedname>EmpCylSL::get_mlim</qualifiedname>
        <briefdescription>
<para>Get limit to mmax for testing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="546" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="546" bodyend="546"/>
        <references refid="class_emp_cyl_s_l_1a450128216652014ea18eb6c325f04945" compoundref="_emp_cyl_s_l_8_h" startline="57">MLIM</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ab3bfa5b72ebb7dd2f3a44705de905b99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::get_mmax</definition>
        <argsstring>(void)</argsstring>
        <name>get_mmax</name>
        <qualifiedname>EmpCylSL::get_mmax</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Parameter access: get mmax. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="528" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="528" bodyend="528"/>
        <references refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" compoundref="_emp_cyl_s_l_8_h" startline="56">MMAX</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ae86d4dc7fab3032fbe588eea0bdd1d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::get_mmin</definition>
        <argsstring>()</argsstring>
        <name>get_mmin</name>
        <qualifiedname>EmpCylSL::get_mmin</qualifiedname>
        <briefdescription>
<para>Get limit to mmax for testing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="543" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="543" bodyend="543"/>
        <references refid="class_emp_cyl_s_l_1aff9c53fa3175a325355c0f6826dc18ec" compoundref="_emp_cyl_s_l_8_h" startline="57">MMIN</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a54a291607a6a7439668c32431496fe9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::get_order</definition>
        <argsstring>(void)</argsstring>
        <name>get_order</name>
        <qualifiedname>EmpCylSL::get_order</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Parameter access: get norder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="549" column="7" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="549" bodyend="549"/>
        <references refid="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" compoundref="_emp_cyl_s_l_8_h" startline="59">NORDER</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aa99910aeac9bd0bcc43b35092a18a9f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::getMaxSNR</definition>
        <argsstring>(void)</argsstring>
        <name>getMaxSNR</name>
        <qualifiedname>EmpCylSL::getMaxSNR</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Maximum SNR coefficient value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="618" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="618" bodyend="618"/>
        <references refid="class_emp_cyl_s_l_1a62306d9b0778b965f9934adccdcd4bb7" compoundref="_emp_cyl_s_l_8_h" startline="71">maxSNR</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aaa2e4007e2a54759b910932321cdcc27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::getMinSNR</definition>
        <argsstring>(void)</argsstring>
        <name>getMinSNR</name>
        <qualifiedname>EmpCylSL::getMinSNR</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Minimum SNR coefficient value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="615" column="10" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="615" bodyend="615"/>
        <references refid="class_emp_cyl_s_l_1ae664cf3f67ea55849aabfc0bc24b454c" compoundref="_emp_cyl_s_l_8_h" startline="71">minSNR</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a1090e03956ae9472f3e706155b236a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::init_pca</definition>
        <argsstring>()</argsstring>
        <name>init_pca</name>
        <qualifiedname>EmpCylSL::init_pca</qualifiedname>
        <briefdescription>
<para>Initialize PCA work space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="630" column="8"/>
        <referencedby refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" compoundref="_emp_cyl_s_l_8_h" startline="772" endline="804">setHall</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a6401232ca5ea7a376c5b303e9eb56a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::make_coefficients</definition>
        <argsstring>(bool compute=false)</argsstring>
        <name>make_coefficients</name>
        <qualifiedname>EmpCylSL::make_coefficients</qualifiedname>
        <param>
          <type>bool</type>
          <declname>compute</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Make coefficients from accumulated data. </para>
        </briefdescription>
        <detaileddescription>
<para>All levels </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="603" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a69b730b34f2ced6288bb2d05a815b626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::make_coefficients</definition>
        <argsstring>(unsigned mlevel, bool compute=false)</argsstring>
        <name>make_coefficients</name>
        <qualifiedname>EmpCylSL::make_coefficients</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>mlevel</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compute</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Single level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="606" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1aa6fc95bb8a5ab07336365777c4c86f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::make_eof</definition>
        <argsstring>(void)</argsstring>
        <name>make_eof</name>
        <qualifiedname>EmpCylSL::make_eof</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Make empirical orthgonal functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="609" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a657091ee7e0834ad0eda16a278272f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::pca_hall</definition>
        <argsstring>(bool compute, bool subsamp)</argsstring>
        <name>pca_hall</name>
        <qualifiedname>EmpCylSL::pca_hall</qualifiedname>
        <param>
          <type>bool</type>
          <declname>compute</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>subsamp</declname>
        </param>
        <briefdescription>
<para>Compute PCA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="612" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a508f0810f70a5c66750bde83503591ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::read_cache</definition>
        <argsstring>(void)</argsstring>
        <name>read_cache</name>
        <qualifiedname>EmpCylSL::read_cache</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read basis from cache file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="525" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a2df1c13c177b4650056eac8c14e348e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::read_eof_file</definition>
        <argsstring>(const std::string &amp;eof_file)</argsstring>
        <name>read_eof_file</name>
        <qualifiedname>EmpCylSL::read_eof_file</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>eof_file</declname>
        </param>
        <briefdescription>
<para>Read EOF basis from saved file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="519" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a8e24889349da789a18bc4e97534ce3dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EmpCylSL::read_eof_header</definition>
        <argsstring>(const std::string &amp;eof_file)</argsstring>
        <name>read_eof_header</name>
        <qualifiedname>EmpCylSL::read_eof_header</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>eof_file</declname>
        </param>
        <briefdescription>
<para>Read EOF basis header from saved file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="516" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a1d5d673b23425cb29f6427b30dc804e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::reset</definition>
        <argsstring>(int numr, int lmax, int mmax, int nord, double ascale, double hscale, int Nodd, std::string cachename)</argsstring>
        <name>reset</name>
        <qualifiedname>EmpCylSL::reset</qualifiedname>
        <param>
          <type>int</type>
          <declname>numr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nord</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ascale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hscale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Nodd</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>cachename</declname>
        </param>
        <briefdescription>
<para>Reconstruct basis with new parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="511" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af25d5815c173d7cb6337488775802db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::reset_mass</definition>
        <argsstring>(void)</argsstring>
        <name>reset_mass</name>
        <qualifiedname>EmpCylSL::reset_mass</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear mass counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="597" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a6bf83f8f0c4c7e94dc46b2d86ae48295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::restrict_order</definition>
        <argsstring>(int n)</argsstring>
        <name>restrict_order</name>
        <qualifiedname>EmpCylSL::restrict_order</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Restrict order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="734" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1acc5d0898ab7cea4df7f5dddeea9adcba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_coefs</definition>
        <argsstring>(int mm, const Eigen::VectorXd &amp;cos1, const Eigen::VectorXd &amp;sin1, bool zero=true)</argsstring>
        <name>set_coefs</name>
        <qualifiedname>EmpCylSL::set_coefs</qualifiedname>
        <param>
          <type>int</type>
          <declname>mm</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>cos1</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>sin1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set coefficients from Vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Extrapolate and sum coefficents per multistep level to get a complete set of coefficients for force evaluation at an intermediate time step </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="677" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a3ccfb9016b0b7b7d508d77cf9d0ef25e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_coefs</definition>
        <argsstring>(int mm, const std::vector&lt; double &gt; &amp;cos1, const std::vector&lt; double &gt; &amp;sin1, bool zero=true)</argsstring>
        <name>set_coefs</name>
        <qualifiedname>EmpCylSL::set_coefs</qualifiedname>
        <param>
          <type>int</type>
          <declname>mm</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>cos1</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>sin1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set coefficients from std::vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="681" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a4781146b6d532a885eac87681b5ba419" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_mass</definition>
        <argsstring>(double mass)</argsstring>
        <name>set_mass</name>
        <qualifiedname>EmpCylSL::set_mass</qualifiedname>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Set cylmass manually. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="694" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="694" bodyend="697"/>
        <references refid="class_emp_cyl_s_l_1ac5b718c98b51ee729a87c4e4d3add432" compoundref="_emp_cyl_s_l_8_h" startline="70">cylmass</references>
        <references refid="class_emp_cyl_s_l_1a65e2efdbf4893d31dfc6e466739133c7" compoundref="_emp_cyl_s_l_8_h" startline="69">cylmass_made</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a55b3fe32f3c3eea485767941d0110107" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_mlim</definition>
        <argsstring>(int mlim)</argsstring>
        <name>set_mlim</name>
        <qualifiedname>EmpCylSL::set_mlim</qualifiedname>
        <param>
          <type>int</type>
          <declname>mlim</declname>
        </param>
        <briefdescription>
<para>Set limit to mmax for testing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="540" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="540" bodyend="540"/>
        <references refid="class_emp_cyl_s_l_1a450128216652014ea18eb6c325f04945" compoundref="_emp_cyl_s_l_8_h" startline="57">MLIM</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1ad025f491b47c2f289833180d974fad00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_mmin</definition>
        <argsstring>(int mmin)</argsstring>
        <name>set_mmin</name>
        <qualifiedname>EmpCylSL::set_mmin</qualifiedname>
        <param>
          <type>int</type>
          <declname>mmin</declname>
        </param>
        <briefdescription>
<para>Set limit to mmax for testing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="537" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="537" bodyend="537"/>
        <references refid="class_emp_cyl_s_l_1aff9c53fa3175a325355c0f6826dc18ec" compoundref="_emp_cyl_s_l_8_h" startline="57">MMIN</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a67fbb41e7028467a5f39042d0a9d0874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_mrange</definition>
        <argsstring>(int mmin, int mmax)</argsstring>
        <name>set_mrange</name>
        <qualifiedname>EmpCylSL::set_mrange</qualifiedname>
        <param>
          <type>int</type>
          <declname>mmin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mmax</declname>
        </param>
        <briefdescription>
<para>Set azimuthal order range for evaluation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="534" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="534" bodyend="534"/>
        <references refid="class_emp_cyl_s_l_1a450128216652014ea18eb6c325f04945" compoundref="_emp_cyl_s_l_8_h" startline="57">MLIM</references>
        <references refid="class_emp_cyl_s_l_1aff9c53fa3175a325355c0f6826dc18ec" compoundref="_emp_cyl_s_l_8_h" startline="57">MMIN</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1adcff853a8bc392ce63ec4f2ba5f13cfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::set_nrange</definition>
        <argsstring>(int nmin, int nmax)</argsstring>
        <name>set_nrange</name>
        <qualifiedname>EmpCylSL::set_nrange</qualifiedname>
        <param>
          <type>int</type>
          <declname>nmin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nmax</declname>
        </param>
        <briefdescription>
<para>Set radial order range for evaluation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="531" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="531" bodyend="531"/>
        <references refid="class_emp_cyl_s_l_1aaef776ee74e1bf29c608b6e635111049" compoundref="_emp_cyl_s_l_8_h" startline="58">NLIM</references>
        <references refid="class_emp_cyl_s_l_1a6ec0b65d4efab53a29c62d0afb8fb91d" compoundref="_emp_cyl_s_l_8_h" startline="58">NMIN</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af49dd0104d532aabb4f6a3524dabdb40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setSampT</definition>
        <argsstring>(int N)</argsstring>
        <name>setSampT</name>
        <qualifiedname>EmpCylSL::setSampT</qualifiedname>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>For PCAVAR: set subsample size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="588" column="8" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="588" bodyend="588"/>
        <references refid="class_emp_cyl_s_l_1a0372fb0957caf5a86e74d4f594bff96f" compoundref="_emp_cyl_s_l_8_h" startline="200">defSampT</references>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a2e5a9690880a05b37e253a3802a394b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setup_accumulation</definition>
        <argsstring>(int toplev=0)</argsstring>
        <name>setup_accumulation</name>
        <qualifiedname>EmpCylSL::setup_accumulation</qualifiedname>
        <param>
          <type>int</type>
          <declname>toplev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Setup for accumulated coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="585" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a746e4c31c3497ecafd96f556e2bf9447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setup_eof</definition>
        <argsstring>(void)</argsstring>
        <name>setup_eof</name>
        <qualifiedname>EmpCylSL::setup_eof</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>For EOF computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="594" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a19d1760036463f6711b552a88cee6b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmpCylSL::setup_table</definition>
        <argsstring>(void)</argsstring>
        <name>setup_table</name>
        <qualifiedname>EmpCylSL::setup_table</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>For EOF. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="591" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a40102949b815daef674f1ca432e4940b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::y_to_z</definition>
        <argsstring>(double y)</argsstring>
        <name>y_to_z</name>
        <qualifiedname>EmpCylSL::y_to_z</qualifiedname>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Compute Z from non-dbimensional vertical coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="555" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1a4564a78e83de79884e1c1c886a345a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double EmpCylSL::z_to_y</definition>
        <argsstring>(double z)</argsstring>
        <name>z_to_y</name>
        <qualifiedname>EmpCylSL::z_to_y</qualifiedname>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Compute non-dimensional vertical coordinate from Z. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="552" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_emp_cyl_s_l_1af310cb890568c5493a88e3a06db16d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EmpCylSL::~EmpCylSL</definition>
        <argsstring>(void)</argsstring>
        <name>~EmpCylSL</name>
        <qualifiedname>EmpCylSL::~EmpCylSL</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="508" column="3"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Encapsulatates a <ref refid="class_s_l_grid_sph" kindref="compound">SLGridSph</ref> (Sturm-Liouville basis) for use as force method</para>
<para>This version breaks the spherical basis computation into even and odd subspaces if Nodd is selected. This gives the user more control over the vertical parity, is numerically more accurate, and more efficient. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CylEXP</label>
        <link refid="class_cyl_e_x_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>EmpCylSL</label>
        <link refid="class_emp_cyl_s_l"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>CylCoefHeader</label>
        <link refid="struct_cyl_coef_header"/>
      </node>
      <node id="1">
        <label>EmpCylSL</label>
        <link refid="class_emp_cyl_s_l"/>
        <childnode refid="2" relation="usage">
          <edgelabel>coefheadercyl</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>cosL</edgelabel>
          <edgelabel>cosN</edgelabel>
          <edgelabel>sinL</edgelabel>
          <edgelabel>sinN</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>covV</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>covM</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>densRg</edgelabel>
          <edgelabel>massRg</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>EmpCylSL::CoefMatrix</label>
        <link refid="struct_emp_cyl_s_l_1_1_coef_matrix"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>EmpCylSL::CoefVector</label>
        <link refid="struct_emp_cyl_s_l_1_1_coef_vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>EmpCylSL::MstepArray</label>
        <link refid="struct_emp_cyl_s_l_1_1_mstep_array"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>Interp1d</label>
        <link refid="class_interp1d"/>
      </node>
      <node id="9">
        <label>Linear1d</label>
        <link refid="class_linear1d"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; VectorD2ptr &gt;</label>
      </node>
      <node id="8">
        <label>std::vector&lt; std::vector&lt; MatrixM &gt; &gt;</label>
      </node>
      <node id="6">
        <label>std::vector&lt; std::vector&lt; VectorM &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/weinberg/Projects/EXP/include/EmpCylSL.H" line="40" column="1" bodyfile="/home/weinberg/Projects/EXP/include/EmpCylSL.H" bodystart="41" bodyend="1025"/>
    <listofallmembers>
      <member refid="class_emp_cyl_s_l_1aa73f0cb40abc6958380212b49e620302" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>accum_cos</name></member>
      <member refid="class_emp_cyl_s_l_1a7a9a5f30a82f1540107d6e5c0dcb3ccd" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>accum_sin</name></member>
      <member refid="class_emp_cyl_s_l_1a247309c8de363bdacd60769343ca5a54" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate</name></member>
      <member refid="class_emp_cyl_s_l_1a29c9054e96a255d4fba26ad01b79f553" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate</name></member>
      <member refid="class_emp_cyl_s_l_1ab7e13975e0b5e76a90d62b8173b2fd3a" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a922d558463e3dd98e3d1bba0b193797c" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a315b273faa77c0ce4a0d8470af77c31d" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate_eof_thread</name></member>
      <member refid="class_emp_cyl_s_l_1a03c78efa441af75c60e8165e0c227b3d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate_eof_thread_call</name></member>
      <member refid="class_emp_cyl_s_l_1a2eca026c8c9a47db68dde26ff99ca5e1" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate_thread</name></member>
      <member refid="class_emp_cyl_s_l_1aa4f6f96e4ffed81950ee435d661f98fc" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulate_thread_call</name></member>
      <member refid="class_emp_cyl_s_l_1ae17f2940466adeeab60415fbb9a0a903" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulated_dens_eval</name></member>
      <member refid="class_emp_cyl_s_l_1a7f7f8c1328be01fbcfd2257ec617dae6" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulated_eval</name></member>
      <member refid="class_emp_cyl_s_l_1a18e0d78655361a9a734ad2e6df769d4d" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>accumulated_midplane_eval</name></member>
      <member refid="class_emp_cyl_s_l_1a63fbc7a58c18306cf8ff7b9cd1f1acd7" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>ASCALE</name></member>
      <member refid="class_emp_cyl_s_l_1a686c18b7deb23a96b0608d96a7d13164" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>AxiDiskPtr</name></member>
      <member refid="class_emp_cyl_s_l_1a895b2b9cd9a80389b0a8e918bedee390" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cache_grid</name></member>
      <member refid="class_emp_cyl_s_l_1ab771f6442cb98992024f528d9711004e" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cachefile</name></member>
      <member refid="class_emp_cyl_s_l_1a862b82f17985a1002130ea7d735f3210" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>cacheInfo</name></member>
      <member refid="class_emp_cyl_s_l_1aaae6d0d738e28ae17f0450ac8888ff38" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cmagic</name></member>
      <member refid="class_emp_cyl_s_l_1a69cea546b093407c96f564e9e4fc132a" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>CMAPR</name></member>
      <member refid="class_emp_cyl_s_l_1a56526a140c4c34248902966681124db2" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>CMAPZ</name></member>
      <member refid="class_emp_cyl_s_l_1aa6b0d44cd165d3e014ba1f11f00167c9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>coefheadercyl</name></member>
      <member refid="class_emp_cyl_s_l_1af20a77b1f4fd2c8e813d98711460e695" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>coefs_made</name></member>
      <member refid="class_emp_cyl_s_l_1a010b121e9d91a34a9698e670b6bbb7bc" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>coefs_made_all</name></member>
      <member refid="class_emp_cyl_s_l_1a0405d6102726bae6b522efd162ff8d4e" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>compare_basis</name></member>
      <member refid="class_emp_cyl_s_l_1a9261c96b5c2f59bf357e9eff0e0f005d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>compute_eof_grid</name></member>
      <member refid="class_emp_cyl_s_l_1a57d043d255d6b3a9a30c2be6bbbcb329" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>compute_even_odd</name></member>
      <member refid="class_emp_cyl_s_l_1a72d8726715739ecffdfe29e5c8569cbc" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>ContribArray</name></member>
      <member refid="class_emp_cyl_s_l_1ab415413271f771c89d825134bb946ee3" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cosL</name></member>
      <member refid="class_emp_cyl_s_l_1ab17784aafefb2d23b269b10b0aebba76" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cosm</name></member>
      <member refid="class_emp_cyl_s_l_1aa21c6a9576dc5d76cba066a238b94409" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cosN</name></member>
      <member refid="class_emp_cyl_s_l_1a9c0aa23a0d1b44c9c421d87b1b64a0b4" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>covM</name></member>
      <member refid="class_emp_cyl_s_l_1a7b6c8bcf8ee3a9ef0c055fc98a139fd6" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>covV</name></member>
      <member refid="class_emp_cyl_s_l_1a791dca5c81aa700228f61cbe00327113" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>create_deprojection</name></member>
      <member refid="class_emp_cyl_s_l_1ac5b718c98b51ee729a87c4e4d3add432" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cylmass</name></member>
      <member refid="class_emp_cyl_s_l_1a9ced854d386d7b1306e498ca4eb54827" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cylmass1</name></member>
      <member refid="class_emp_cyl_s_l_1a65e2efdbf4893d31dfc6e466739133c7" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>cylmass_made</name></member>
      <member refid="class_emp_cyl_s_l_1a1224b24b83979fb27ddfc1bd4aecc29e" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>d</name></member>
      <member refid="class_emp_cyl_s_l_1a0e10a3d34155f376150a0ece8a85acbb" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>d_xi_to_r</name></member>
      <member refid="class_emp_cyl_s_l_1a142075bc56f2792e7f9427a1b20fe43e" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>d_y_to_z</name></member>
      <member refid="class_emp_cyl_s_l_1a0372fb0957caf5a86e74d4f594bff96f" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>defSampT</name></member>
      <member refid="class_emp_cyl_s_l_1a6123da82bfd1ca939d5392260118200a" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>dend</name></member>
      <member refid="class_emp_cyl_s_l_1a7e56db72abcf0d0eec07f15eb2376032" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>densC</name></member>
      <member refid="class_emp_cyl_s_l_1adc40eee109b96edacb4bcf58e34cf881" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>densR</name></member>
      <member refid="class_emp_cyl_s_l_1a8a6c84c7601d6a29836df1456dcf59c6" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>densRg</name></member>
      <member refid="class_emp_cyl_s_l_1ae05a132072a42c08fdfbac5cdd4117b0" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>densS</name></member>
      <member refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa67567924e95e58ef6bb9ecd65d96a077" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Deproject</name></member>
      <member refid="class_emp_cyl_s_l_1af4346551a09d18530b7cd80cec281110" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>determine_acceleration_and_potential</name></member>
      <member refid="class_emp_cyl_s_l_1a2b600702935611bdd72f5c7c7094fc53" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>determine_coefficients</name></member>
      <member refid="class_emp_cyl_s_l_1ae0b0f702edf40c1ed5bc409e7c777bde" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>dfac</name></member>
      <member refid="class_emp_cyl_s_l_1a02a79620604c800c332acda6b041447f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dlegendre_R</name></member>
      <member refid="class_emp_cyl_s_l_1acaa96903f06d4b447c75602ae1417354" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>dlegs</name></member>
      <member refid="class_emp_cyl_s_l_1af7eb74bd37528e0244aba778dc2d40c2" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>dpot</name></member>
      <member refid="class_emp_cyl_s_l_1a6fbec197b1432a4ba8b565b613953add" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_basis</name></member>
      <member refid="class_emp_cyl_s_l_1a667aeb1e86302010a4d0d9207e9b24fb" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_coefs</name></member>
      <member refid="class_emp_cyl_s_l_1aa3d995b136f2f8c713c3551dd14577a0" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_coefs_binary</name></member>
      <member refid="class_emp_cyl_s_l_1a232a9a2eac79772432cc3fc033ef46b7" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_eof_file</name></member>
      <member refid="class_emp_cyl_s_l_1a0e97a59d8de16ea6ed7059406a4dc4e2" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_images</name></member>
      <member refid="class_emp_cyl_s_l_1af268662f8998695185625f734f028a71" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_images_basis</name></member>
      <member refid="class_emp_cyl_s_l_1a85056f370f790a6f05c38319d5e407ff" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_images_basis_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a2f3e7464c373fa3c9d0a782b1e2187ff" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>dump_images_basis_pca</name></member>
      <member refid="class_emp_cyl_s_l_1a76b66e4f3961b92a33be7a3a1d8716a6" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>dX</name></member>
      <member refid="class_emp_cyl_s_l_1ac063fba4503a8805591e93a6a753e5e5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>dY</name></member>
      <member refid="class_emp_cyl_s_l_1a75221e0fd5253d5bb5ad4c1565a76849" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>ef</name></member>
      <member refid="class_emp_cyl_s_l_1a007a5ef3ae95a25e61a17b62c0fb7333" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>efE</name></member>
      <member refid="class_emp_cyl_s_l_1adee991b5fc63a5052744c23fadca4904" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>efO</name></member>
      <member refid="class_emp_cyl_s_l_1aa15dc03935856aaebdb4ee70778b6877" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>eigen_problem</name></member>
      <member refid="class_emp_cyl_s_l_1af99016daf180ebe406394ee57e3b9a16" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>EmpCylSL</name></member>
      <member refid="class_emp_cyl_s_l_1a080959b56ba7865b65f5c158f520d0c1" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>EmpCylSL</name></member>
      <member refid="class_emp_cyl_s_l_1a3a311372368aab409ba209051da72adc" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>EmpCylSL</name></member>
      <member refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>EmpModel</name></member>
      <member refid="class_emp_cyl_s_l_1a7b1705c7239daa9a9274ea07cc687ea8" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>EmpModelLabs</name></member>
      <member refid="class_emp_cyl_s_l_1ae63d3655cdce09b95b3d656b3fb2b1bd" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>enforce_limits</name></member>
      <member refid="class_emp_cyl_s_l_1a69c22647b58e9ec9f2cbea6abc59ca34" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>eof_made</name></member>
      <member refid="class_emp_cyl_s_l_1a88f23e904a85afa0c441954a20bb02dd" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>ev</name></member>
      <member refid="class_emp_cyl_s_l_1afce0e9b9115cff91fec2a3bbdb5f2332" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>evE</name></member>
      <member refid="class_emp_cyl_s_l_1a0becb34528efb75dd76d60b4a02084d8" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>EVEN_M</name></member>
      <member refid="class_emp_cyl_s_l_1a2f44992edff81154f1026271d9b5681e" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>EvenOdd</name></member>
      <member refid="class_emp_cyl_s_l_1ae2164b7a15dac73e29cb86cd6de4e0fb" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>evO</name></member>
      <member refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa3371db82e8230c5a156ba0bb2b31bef5" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Exponential</name></member>
      <member refid="class_emp_cyl_s_l_1a1c404d27ff51dd5e3fe15942c1117bf3" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>facC</name></member>
      <member refid="class_emp_cyl_s_l_1ad6a54ba5d4b62566788cfbbaf98beba3" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>facS</name></member>
      <member refid="class_emp_cyl_s_l_1a8fc65e6b7aeb012a488b215c8cecb7e5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>ffac</name></member>
      <member refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa371f52b51dc8b5b0aeb0d215b04000bd" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Gaussian</name></member>
      <member refid="class_emp_cyl_s_l_1af9d845267ad87dcffa8de0ed18375a32" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>generate_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a35462b138d3301822560e2c42bd88751" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_all</name></member>
      <member refid="class_emp_cyl_s_l_1a17510668f28e08910262d470b7e1c36b" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_ascale</name></member>
      <member refid="class_emp_cyl_s_l_1adb2fa176ce9aad23f30408140174cbc1" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_coefs</name></member>
      <member refid="class_emp_cyl_s_l_1aefdce8f742d10ee3833b9f57ac125d94" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_coefs</name></member>
      <member refid="class_emp_cyl_s_l_1ad9ab639d87404f5410b8136fa75a2873" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_hscale</name></member>
      <member refid="class_emp_cyl_s_l_1a7da7158d060f7d325bd5146d6f964cc0" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_mlim</name></member>
      <member refid="class_emp_cyl_s_l_1ab3bfa5b72ebb7dd2f3a44705de905b99" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_mmax</name></member>
      <member refid="class_emp_cyl_s_l_1ae86d4dc7fab3032fbe588eea0bdd1d02" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_mmin</name></member>
      <member refid="class_emp_cyl_s_l_1a54a291607a6a7439668c32431496fe9f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_order</name></member>
      <member refid="class_emp_cyl_s_l_1af2304c89b46f7bbbfb5ba0ffc9f91c3d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>get_pot</name></member>
      <member refid="class_emp_cyl_s_l_1ad1a0ddf3cf580d8c4d688d1232e5d3ad" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_rtable</name></member>
      <member refid="class_emp_cyl_s_l_1a1f6cc889a40ff0168ee43b4d139b7e8f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>get_trimmed</name></member>
      <member refid="class_emp_cyl_s_l_1adc57fe7deeda26444f065e444814b105" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getDensC</name></member>
      <member refid="class_emp_cyl_s_l_1a99e22052f40b08a7a87f8ff89541cf45" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getDensS</name></member>
      <member refid="class_emp_cyl_s_l_1aae847e6f397b305dcd301ad7966a7923" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getDensSC</name></member>
      <member refid="class_emp_cyl_s_l_1a174b3c5c2d43c1c92ae475a2e9bd5768" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>getHeader</name></member>
      <member refid="class_emp_cyl_s_l_1adbca4138f5230f4e2817376a73e33a1b" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>getHeader_binary</name></member>
      <member refid="class_emp_cyl_s_l_1a28d96e9218fc77f4c9b65c2cc7142f3d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>getHeader_hdf5</name></member>
      <member refid="class_emp_cyl_s_l_1aa99910aeac9bd0bcc43b35092a18a9f7" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getMaxSNR</name></member>
      <member refid="class_emp_cyl_s_l_1aaa2e4007e2a54759b910932321cdcc27" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getMinSNR</name></member>
      <member refid="class_emp_cyl_s_l_1a733b36fdc7a0bb9b6b57f067eb75d925" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getPotlC</name></member>
      <member refid="class_emp_cyl_s_l_1abca06e6140ca55efa1162089b8346b68" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getPotlS</name></member>
      <member refid="class_emp_cyl_s_l_1a3506d9e2af85bad3fbaa6d4322445139" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getPotParticle</name></member>
      <member refid="class_emp_cyl_s_l_1a0671042c6008017bd136991f272894b8" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>getPotSC</name></member>
      <member refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793afab918d81116908252f64b5c7e2eaa99" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Hall</name></member>
      <member refid="class_emp_cyl_s_l_1a32cdbad0071825e02d2f697ca4aedf4b" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>hallfile</name></member>
      <member refid="class_emp_cyl_s_l_1afb2e483e8e61f9b89e6e60c5a9042c71" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>HALLFREQ</name></member>
      <member refid="class_emp_cyl_s_l_1ababc9c96aa1aafb45b9eac7d5870e127" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>HEXP</name></member>
      <member refid="class_emp_cyl_s_l_1a010b7760c0b40c5c7eb43f0913d75f9f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>HFAC</name></member>
      <member refid="class_emp_cyl_s_l_1ac1da77e65816b15f8514d8869b8bdcc3" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>hmagic</name></member>
      <member refid="class_emp_cyl_s_l_1a2e698863ae6024282839ea56e36c49f9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>howmany</name></member>
      <member refid="class_emp_cyl_s_l_1af4350beca43d1bf17c562b12a6adf88c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>howmany1</name></member>
      <member refid="class_emp_cyl_s_l_1aafceeb0f77f53e1eb2fafc9ac8d1ddc9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>HSCALE</name></member>
      <member refid="class_emp_cyl_s_l_1a1090e03956ae9472f3e706155b236a91" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>init_pca</name></member>
      <member refid="class_emp_cyl_s_l_1af7a9d3523d76046d94b09fbee943f388" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>integral</name></member>
      <member refid="class_emp_cyl_s_l_1ab1a540fc424075fe891650f694695da9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>lE</name></member>
      <member refid="class_emp_cyl_s_l_1ad58896052cd458e7f8c6a69a84a0b061" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>legendre_R</name></member>
      <member refid="class_emp_cyl_s_l_1add032624c6deb17fcfadc48ff7168e41" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>legs</name></member>
      <member refid="class_emp_cyl_s_l_1a237f48b16768df1c2963b34a4825bc61" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>LMAX</name></member>
      <member refid="class_emp_cyl_s_l_1ac841216851a44884a1947106c99a409b" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>lO</name></member>
      <member refid="class_emp_cyl_s_l_1a448caae9d6d4f439c18ca51d9bebe478" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>logarithmic</name></member>
      <member refid="class_emp_cyl_s_l_1a902557b515ca710ca7e6d685135f1201" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>m</name></member>
      <member refid="class_emp_cyl_s_l_1a7c0ba4293a82547d2551f2b8e84c0261" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>M</name></member>
      <member refid="class_emp_cyl_s_l_1a6401232ca5ea7a376c5b303e9eb56a00" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>make_coefficients</name></member>
      <member refid="class_emp_cyl_s_l_1a69b730b34f2ced6288bb2d05a815b626" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>make_coefficients</name></member>
      <member refid="class_emp_cyl_s_l_1aa6fc95bb8a5ab07336365777c4c86f2b" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>make_eof</name></member>
      <member refid="class_emp_cyl_s_l_1ade494a2d028ce2cafe796f6bae9af742" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>make_grid</name></member>
      <member refid="class_emp_cyl_s_l_1ad5c739203d28501087b57c1745a932e5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>make_sl</name></member>
      <member refid="class_emp_cyl_s_l_1aad0b13603aa2c4cc3af549530800d383" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>massR</name></member>
      <member refid="class_emp_cyl_s_l_1ad4b19dd1a4221dd2cb5625aa3d2e9081" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>massRg</name></member>
      <member refid="class_emp_cyl_s_l_1ae4013c1b10e1ee68436d77b2576d23f3" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>massT</name></member>
      <member refid="class_emp_cyl_s_l_1a8e7c4e2797ecbb1df34246bd489ce330" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>massT1</name></member>
      <member refid="class_emp_cyl_s_l_1a61332ab2df1dc74abdf9d54223809929" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>MatrixM</name></member>
      <member refid="class_emp_cyl_s_l_1a62306d9b0778b965f9934adccdcd4bb7" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>maxSNR</name></member>
      <member refid="class_emp_cyl_s_l_1ae664cf3f67ea55849aabfc0bc24b454c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>minSNR</name></member>
      <member refid="class_emp_cyl_s_l_1a450128216652014ea18eb6c325f04945" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MLIM</name></member>
      <member refid="class_emp_cyl_s_l_1adf3f5b641c449a9d550b67b87c5dd91d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MMAX</name></member>
      <member refid="class_emp_cyl_s_l_1aff9c53fa3175a325355c0f6826dc18ec" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MMIN</name></member>
      <member refid="class_emp_cyl_s_l_1ac40df1334df23c1531f34aefafb11c29" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>mpi_double_buf2</name></member>
      <member refid="class_emp_cyl_s_l_1a8d92f9c088ceee33e104792ed39d3ea4" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>mpi_double_buf3</name></member>
      <member refid="class_emp_cyl_s_l_1ae5bf5328414eb27f6f642a7608676f5a" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIbufsz</name></member>
      <member refid="class_emp_cyl_s_l_1a4405587c407e6828884f6f443a420fd9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIin</name></member>
      <member refid="class_emp_cyl_s_l_1ac9ef77c51d33e232d5b22d3e5d2f2535" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIin2</name></member>
      <member refid="class_emp_cyl_s_l_1afe7d4dd224d67776125f8c9cdd28377e" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIin_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a7dbbd73cd813c11b4157a8f2d3ce8be4" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIout</name></member>
      <member refid="class_emp_cyl_s_l_1aa2e984262e82cc04f868fceed134dcda" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIout2</name></member>
      <member refid="class_emp_cyl_s_l_1aad446c8c59cfa4ce9e945e81f147970f" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPIout_eof</name></member>
      <member refid="class_emp_cyl_s_l_1ae4d1454f185faf1bbb801782da5add80" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>MPItable</name></member>
      <member refid="class_emp_cyl_s_l_1acab556b4b8f88e42950851f45fd4eaf5" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>mtype</name></member>
      <member refid="class_emp_cyl_s_l_1a1966b7be886e21c19de9945e84cf1996" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>nbodstot</name></member>
      <member refid="class_emp_cyl_s_l_1aa416edc90a399610bc9dfbe3f5fae285" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>Neven</name></member>
      <member refid="class_emp_cyl_s_l_1adc51b0fb5f7e79e450d931ba715e75ab" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>NewCache</name></member>
      <member refid="class_emp_cyl_s_l_1a62e259dd548f50712047634709d45b29" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>NewCoefs</name></member>
      <member refid="class_emp_cyl_s_l_1abc7f555cee56e2f2677c3c1d378e7d93" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>NKEEP</name></member>
      <member refid="class_emp_cyl_s_l_1aaef776ee74e1bf29c608b6e635111049" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>NLIM</name></member>
      <member refid="class_emp_cyl_s_l_1a4e41bf39972b5b2255e2ffd521c03863" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>NMAX</name></member>
      <member refid="class_emp_cyl_s_l_1a6ec0b65d4efab53a29c62d0afb8fb91d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>NMIN</name></member>
      <member refid="class_emp_cyl_s_l_1a25e0bb43aff536fb91927ce3aa30c4e7" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>Nodd</name></member>
      <member refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793a955b9c65bb82613a6ed0a36482bfbded" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>None</name></member>
      <member refid="class_emp_cyl_s_l_1a3c7aa119b8538a71a6504e5b3b99f7b1" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>NORDER</name></member>
      <member refid="class_emp_cyl_s_l_1a3a514d4baf7c51ad65ae9c0934313b08" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>NOUT</name></member>
      <member refid="class_emp_cyl_s_l_1a1085cebe7aaa975b9ee5a08c5f998787" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>numbT</name></member>
      <member refid="class_emp_cyl_s_l_1a23629a6b09bcf37a016db8a2cde23909" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>numbT1</name></member>
      <member refid="class_emp_cyl_s_l_1aafe9d97b940c6bf5a322784c53d49b5f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>NUMR</name></member>
      <member refid="class_emp_cyl_s_l_1a3c5efbaa5c0823fa2df420dbb4ad701c" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>NUMX</name></member>
      <member refid="class_emp_cyl_s_l_1a3ca5a4b84952e41185bc851f0b0a4310" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>NUMY</name></member>
      <member refid="class_emp_cyl_s_l_1af169df94ef9d7b66681fc2bfe6c97870" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>ortho</name></member>
      <member refid="class_emp_cyl_s_l_1a588dfcebda9ba2b17021345f5966be63" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>ortho_check</name></member>
      <member refid="class_emp_cyl_s_l_1af728339f3ca3414a24893217f2f350af" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>orthoCheck</name></member>
      <member refid="class_emp_cyl_s_l_1a4677a8c8d6acc5d29e18961267a37637" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>p</name></member>
      <member refid="class_emp_cyl_s_l_1a66ecaa8742fce737aa016072c5fc8d83" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>parityCheck</name></member>
      <member refid="class_emp_cyl_s_l_1aee6bee90dbadeb9b41b8f83d4f6e49a7" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>pb</name></member>
      <member refid="class_emp_cyl_s_l_1a657091ee7e0834ad0eda16a278272f0f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>pca_hall</name></member>
      <member refid="class_emp_cyl_s_l_1a51068281e8060eadcd0251bbcb73150c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>PCAbasisPtr</name></member>
      <member refid="class_emp_cyl_s_l_1a326d046bf01703dccd3808fde1f366ef" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>PCADRY</name></member>
      <member refid="class_emp_cyl_s_l_1a97c584dfe52e938ff4511176367bbaee" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>PCAelemPtr</name></member>
      <member refid="class_emp_cyl_s_l_1ad1c941f70ba409b1267a5c602192a06f" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>PCAEOF</name></member>
      <member refid="class_emp_cyl_s_l_1a7421fd16b5bc2b716abdadeb2ee4fbda" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>PCAVAR</name></member>
      <member refid="class_emp_cyl_s_l_1a591fc0a920c89c08db6e8cdeb288daf5" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>PCAVTK</name></member>
      <member refid="class_emp_cyl_s_l_1adb6b13dcb746ba039c6268f0bc0b6f55" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>pfac</name></member>
      <member refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa9bd88c8027e6d12627cae69439530779" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Plummer</name></member>
      <member refid="class_emp_cyl_s_l_1abf856ef4ab862213fcc5b4accb5f135a" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>potC</name></member>
      <member refid="class_emp_cyl_s_l_1af7abc1ca18fef42709c86e250716f146" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>potd</name></member>
      <member refid="class_emp_cyl_s_l_1a80294caadb34d5e85752bed0f85b2b42" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>potS</name></member>
      <member refid="class_emp_cyl_s_l_1a5b083f6c14375b69853fc29b6b6df07fa3cc496a7b14b9c9ede3f215514ab2302" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Power</name></member>
      <member refid="class_emp_cyl_s_l_1ac9e89c53c5668ec51122f129aea8d203" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>PPOW</name></member>
      <member refid="class_emp_cyl_s_l_1a0e2a9a9df575f2d593769c1a7eccf1f8" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>r</name></member>
      <member refid="class_emp_cyl_s_l_1a900f4ad76eb155da9a21e483393c30db" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>r_to_xi</name></member>
      <member refid="class_emp_cyl_s_l_1a6aeebcc6e6a594e01e692d3fe0c75e1c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>rank2</name></member>
      <member refid="class_emp_cyl_s_l_1a83e9d2f440817e5be5c52e8870011a04" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>rank3</name></member>
      <member refid="class_emp_cyl_s_l_1a508f0810f70a5c66750bde83503591ad" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>read_cache</name></member>
      <member refid="class_emp_cyl_s_l_1a2df1c13c177b4650056eac8c14e348e6" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>read_eof_file</name></member>
      <member refid="class_emp_cyl_s_l_1a8e24889349da789a18bc4e97534ce3dd" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>read_eof_header</name></member>
      <member refid="class_emp_cyl_s_l_1ae0483d13ea7eb6db18105537d26e8e9a" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>ReadH5Cache</name></member>
      <member refid="class_emp_cyl_s_l_1ae77c27b192bfc7feb6fc5834f723b73c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>receive_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a1d5d673b23425cb29f6427b30dc804e9" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>reset</name></member>
      <member refid="class_emp_cyl_s_l_1af25d5815c173d7cb6337488775802db2" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>reset_mass</name></member>
      <member refid="class_emp_cyl_s_l_1a6bf83f8f0c4c7e94dc46b2d86ae48295" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>restrict_order</name></member>
      <member refid="class_emp_cyl_s_l_1a159fe49f58f483a9822df5466d7449b7" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>rforceC</name></member>
      <member refid="class_emp_cyl_s_l_1a424f9d954f4fa089119faa997703ace5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>rforceS</name></member>
      <member refid="class_emp_cyl_s_l_1a3e03b95b63b369896cbbaf74d0b6ccda" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>RMAX</name></member>
      <member refid="class_emp_cyl_s_l_1a881a2feeaab884247de5ea52a244a957" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>RMIN</name></member>
      <member refid="class_emp_cyl_s_l_1a6627c10537857cd1da90c8935bba8beb" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>Rtable</name></member>
      <member refid="class_emp_cyl_s_l_1a7e8c6aaa07f701a510982df758e2722c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>sampT</name></member>
      <member refid="class_emp_cyl_s_l_1ae0476e0a062bbdafcb8a953545e12ac1" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>sanity</name></member>
      <member refid="class_emp_cyl_s_l_1a488920dfa102b74d4d23ed0117d0378b" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>SC</name></member>
      <member refid="class_emp_cyl_s_l_1a532118690a60d5648b4ed0e6a5eb0e8a" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>SCe</name></member>
      <member refid="class_emp_cyl_s_l_1a9888a2f438ab079310e669c0796a0d30" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>SCo</name></member>
      <member refid="class_emp_cyl_s_l_1a1d8a54dea56c53271250a52a36268d26" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>send_eof_grid</name></member>
      <member refid="class_emp_cyl_s_l_1acc5d0898ab7cea4df7f5dddeea9adcba" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_coefs</name></member>
      <member refid="class_emp_cyl_s_l_1a3ccfb9016b0b7b7d508d77cf9d0ef25e" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_coefs</name></member>
      <member refid="class_emp_cyl_s_l_1a4781146b6d532a885eac87681b5ba419" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_mass</name></member>
      <member refid="class_emp_cyl_s_l_1a55b3fe32f3c3eea485767941d0110107" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_mlim</name></member>
      <member refid="class_emp_cyl_s_l_1ad025f491b47c2f289833180d974fad00" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_mmin</name></member>
      <member refid="class_emp_cyl_s_l_1a67fbb41e7028467a5f39042d0a9d0874" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_mrange</name></member>
      <member refid="class_emp_cyl_s_l_1adcff853a8bc392ce63ec4f2ba5f13cfd" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_nrange</name></member>
      <member refid="class_emp_cyl_s_l_1a27cd8d9869bfdbb710e28925664f2289" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>set_trimmed</name></member>
      <member refid="class_emp_cyl_s_l_1a9488ca326d3fa636bd807f5caf55d2b5" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setEven</name></member>
      <member refid="class_emp_cyl_s_l_1a7f48386e3f921bde7ec151270ec78650" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setHall</name></member>
      <member refid="class_emp_cyl_s_l_1af49dd0104d532aabb4f6a3524dabdb40" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setSampT</name></member>
      <member refid="class_emp_cyl_s_l_1a2452105272021c3c33064981587c1184" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setTK</name></member>
      <member refid="class_emp_cyl_s_l_1a9a192aad1ace6a1bc46cb96e7ae13ec2" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setTotal</name></member>
      <member refid="class_emp_cyl_s_l_1a2e5a9690880a05b37e253a3802a394b6" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setup_accumulation</name></member>
      <member refid="class_emp_cyl_s_l_1a746e4c31c3497ecafd96f556e2bf9447" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setup_eof</name></member>
      <member refid="class_emp_cyl_s_l_1a0282993cc0ecbc8077b3716f5d423240" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>setup_eof_grid</name></member>
      <member refid="class_emp_cyl_s_l_1a19d1760036463f6711b552a88cee6b86" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>setup_table</name></member>
      <member refid="class_emp_cyl_s_l_1ad4393e20f35ceecb752b3fa6a014bcb0" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>sinecosine_R</name></member>
      <member refid="class_emp_cyl_s_l_1aa39cf62fe73b366dea72632ced5fbea6" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>sinL</name></member>
      <member refid="class_emp_cyl_s_l_1abde6b86c881ce7f5203e851e29641f69" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>sinm</name></member>
      <member refid="class_emp_cyl_s_l_1a82b0d7db830198f6a65ec6548bebc789" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>sinN</name></member>
      <member refid="class_emp_cyl_s_l_1ae28c1cae7b3574cb457c8e1e00a094af" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>SLGridSphPtr</name></member>
      <member refid="class_emp_cyl_s_l_1a5f02b326041b8aa3527a4a22b0505f73" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>SphModTblPtr</name></member>
      <member refid="class_emp_cyl_s_l_1abaa3448ce6126be4f4e33e363e32f3d3" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>SS</name></member>
      <member refid="class_emp_cyl_s_l_1a85ab9fc8d96441ac0f00454a9953a04b" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>SSe</name></member>
      <member refid="class_emp_cyl_s_l_1af391eb68d38ed089e8d89e30f386efa1" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>SSo</name></member>
      <member refid="class_emp_cyl_s_l_1a264b86c3f7815f0a1159ce635bb8095c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>status</name></member>
      <member refid="class_emp_cyl_s_l_1aaceea5f18b07d1825484be021afb0392" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tabd</name></member>
      <member refid="class_emp_cyl_s_l_1a4a4aef6e003e170418c14ffeec5157a6" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tabf</name></member>
      <member refid="class_emp_cyl_s_l_1ae9e179b3f0465c094b8f1006d34ec6af" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>table</name></member>
      <member refid="class_emp_cyl_s_l_1afe32ddfdaa2dfb84185985cccd96b198" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>TableArray</name></member>
      <member refid="class_emp_cyl_s_l_1a00277782d89dd76900b33011a3013a6e" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tabp</name></member>
      <member refid="class_emp_cyl_s_l_1aa65adb8f7180df1379cba2bf3875d674" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tdens</name></member>
      <member refid="class_emp_cyl_s_l_1a18bed20a9f4ae417170c7e3f76d88f48" prot="private" virt="non-virtual"><scope>EmpCylSL</scope><name>tk_type</name></member>
      <member refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>TKType</name></member>
      <member refid="class_emp_cyl_s_l_1a46fe2e58f46713c5fc4b6c14d098c5c1" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tpot</name></member>
      <member refid="class_emp_cyl_s_l_1a5167f382aa884a69a1ef8db6e29b0f90" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>trforce</name></member>
      <member refid="class_emp_cyl_s_l_1abada8966096ea7f46f2162858326f793aaef8f7277ef603757d44900f96e17d67" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>Truncate</name></member>
      <member refid="class_emp_cyl_s_l_1a53492da2afd7c58fe5ab4264aea84007" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tvar</name></member>
      <member refid="class_emp_cyl_s_l_1a219f95b6d3df7abbe26153d2afd7132d" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>tzforce</name></member>
      <member refid="class_emp_cyl_s_l_1a9dc835dbfd02c64df6a771a709a9d3ce" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>use_mpi</name></member>
      <member refid="class_emp_cyl_s_l_1ac5989dfc11361c8449b9aa8bfb5a4a3c" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>used_lock</name></member>
      <member refid="class_emp_cyl_s_l_1aee7673e75b8fe2fa46f8ce4f26c750fb" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>var</name></member>
      <member refid="class_emp_cyl_s_l_1a8bbce4c69f2d703c159a94fa1332317b" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>varE</name></member>
      <member refid="class_emp_cyl_s_l_1a360d9bdaed1954ce3a2106fea01dcab9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>VarMat</name></member>
      <member refid="class_emp_cyl_s_l_1ad4039000460ea132e1d1606cbac03f84" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>varO</name></member>
      <member refid="class_emp_cyl_s_l_1a554140e8382732014abb3e95f8c54f91" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>vc</name></member>
      <member refid="class_emp_cyl_s_l_1aef3ae77896a94fd792bfda35b6b4bfe5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>VectorD2</name></member>
      <member refid="class_emp_cyl_s_l_1ab920a867dad05729d3b2aa3e6f13cb78" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>VectorD2ptr</name></member>
      <member refid="class_emp_cyl_s_l_1a54a8c779ca2381397fa7c8007094e411" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>VectorM</name></member>
      <member refid="class_emp_cyl_s_l_1a0f441f656522cec142a0576d0b8712b9" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>Version</name></member>
      <member refid="class_emp_cyl_s_l_1a5fb42c68731465996008ec4276d458d5" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>VFLAG</name></member>
      <member refid="class_emp_cyl_s_l_1a67a63f563459749ff1d353c9debce1ad" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>vs</name></member>
      <member refid="class_emp_cyl_s_l_1a4efa4f0654c7c45724897fa019a7b8b3" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>VTKFRQ</name></member>
      <member refid="class_emp_cyl_s_l_1ae2b67b9d3e70ccf7e285d06a7b8a9ea5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>WriteH5Cache</name></member>
      <member refid="class_emp_cyl_s_l_1a40fe0cc482bea73f3393f5162d391e2c" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>xi_to_r</name></member>
      <member refid="class_emp_cyl_s_l_1ae7a9188b6870dbc7e3b071961fafd51f" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>XMAX</name></member>
      <member refid="class_emp_cyl_s_l_1a19936b6c0bcde061a1aa72cec91f0ff5" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>XMIN</name></member>
      <member refid="class_emp_cyl_s_l_1a40102949b815daef674f1ca432e4940b" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>y_to_z</name></member>
      <member refid="class_emp_cyl_s_l_1a5b3feb166e2e84e61233a42324d046d4" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>YMAX</name></member>
      <member refid="class_emp_cyl_s_l_1ae5c75b53f89ace4de21856f24d0648f0" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>YMIN</name></member>
      <member refid="class_emp_cyl_s_l_1a4564a78e83de79884e1c1c886a345a4c" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>z_to_y</name></member>
      <member refid="class_emp_cyl_s_l_1aa7c0b484a9d7085e0335beb11ee1c76a" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>zforceC</name></member>
      <member refid="class_emp_cyl_s_l_1a7a1ac165e19334b4603046105628e1eb" prot="protected" virt="non-virtual"><scope>EmpCylSL</scope><name>zforceS</name></member>
      <member refid="class_emp_cyl_s_l_1af310cb890568c5493a88e3a06db16d5d" prot="public" virt="non-virtual"><scope>EmpCylSL</scope><name>~EmpCylSL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
